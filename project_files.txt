### app/admin/admin_users.rb ###
# app/admin/admin_users.rb
ActiveAdmin.register AdminUser do
  permit_params :email, :password, :password_confirmation

  index do
    selectable_column
    id_column
    column :email
    column :current_sign_in_at
    column :sign_in_count
    column :created_at
    actions
  end

  filter :email
  filter :current_sign_in_at
  filter :sign_in_count
  filter :created_at

  form do |f|
    f.inputs do
      f.input :email
      f.input :password
      f.input :password_confirmation
    end
    f.actions
  end
end



### app/admin/categories.rb ###
ActiveAdmin.register Category do
  permit_params :name

  index do
    selectable_column
    id_column
    column :name
    column :products_count do |category|
      category.products.count
    end
    actions
  end

  show do
    attributes_table do
      row :name
      row :products_count do |category|
        category.products.count
      end
      row :created_at
      row :updated_at
    end
    active_admin_comments
  end

  sidebar "Products in this category", only: :show do
    table_for category.products do
      column :name
      column :price
      column :stock_quantity
    end
  end
end



### app/admin/dashboard.rb ###
# frozen_string_literal: true
ActiveAdmin.register_page "Dashboard" do
  menu priority: 1, label: proc { I18n.t("active_admin.dashboard") }

  content title: proc { I18n.t("active_admin.dashboard") } do
    div class: "blank_slate_container", id: "dashboard_default_message" do
      span class: "blank_slate" do
        span I18n.t("active_admin.dashboard_welcome.welcome")
        small I18n.t("active_admin.dashboard_welcome.call_to_action")
      end
    end

    # Here is an example of a simple dashboard with columns and panels.
    #
    # columns do
    #   column do
    #     panel "Recent Posts" do
    #       ul do
    #         Post.recent(5).map do |post|
    #           li link_to(post.title, admin_post_path(post))
    #         end
    #       end
    #     end
    #   end

    #   column do
    #     panel "Info" do
    #       para "Welcome to ActiveAdmin."
    #     end
    #   end
    # end
  end # content
end



### app/admin/orders.rb ###
# app/admin/orders.rb

ActiveAdmin.register Order do
  permit_params :status, :user_id, :total_amount, :payment_intent_id, order_items_attributes: [:id, :product_id, :quantity, :price, :_destroy]

  index do
    selectable_column
    id_column
    column :user do |order|
      order.user.username
    end
    column "Products" do |order|
      order.order_items.map { |item| item.product.name }.join(", ")
    end
    column "Taxes" do |order|
      gst = order.total_amount * (order.gst_rate.to_f / 100.0)
      pst = order.total_amount * (order.pst_rate.to_f / 100.0)
      qst = order.total_amount * (order.qst_rate.to_f / 100.0)
      hst = order.total_amount * (order.hst_rate.to_f / 100.0)
      "GST: #{number_to_currency(gst)}, PST: #{number_to_currency(pst)}, QST: #{number_to_currency(qst)}, HST: #{number_to_currency(hst)}"
    end
    column :total_amount do |order|
      number_to_currency(order.total_amount)
    end
    column :status do |order|
      status = order.status&.humanize || 'Unknown'
      status_tag(status, class: order.status || 'unknown')
    end
    column :payment_intent_id
    column "Recipient Name", &:recipient_name
    column "Recipient Address", &:recipient_address
    column "Province" do |order|
      order.province&.name || 'N/A'
    end
    column :created_at
    column :updated_at
    actions
  end

  filter :user
  filter :total_amount
  filter :status, as: :select, collection: Order.statuses.keys
  filter :created_at
  filter :updated_at
  filter :payment_intent_id
  filter :recipient_name
  filter :recipient_address
  filter :province, as: :select, collection: Province.pluck(:name, :id)

  show do
    attributes_table do
      row :user
      row :total_amount
      row :status do |order|
        order.status&.humanize || 'Unknown'
      end
      row :payment_intent_id
      row :recipient_name
      row :recipient_address
      row :province do |order|
        order.province&.name || 'N/A'
      end
      row :created_at
      row :updated_at
    end

    panel "Order Items" do
      table_for order.order_items do
        column :product
        column :quantity
        column :price
      end
    end

    panel "Taxes" do
      gst = order.total_amount * (order.gst_rate.to_f / 100.0)
      pst = order.total_amount * (order.pst_rate.to_f / 100.0)
      qst = order.total_amount * (order.qst_rate.to_f / 100.0)
      hst = order.total_amount * (order.hst_rate.to_f / 100.0)
      "GST: #{number_to_currency(gst)}, PST: #{number_to_currency(pst)}, QST: #{number_to_currency(qst)}, HST: #{number_to_currency(hst)}"
    end

    panel "Grand Total" do
      number_to_currency(order.total_amount)
    end
  end

  form do |f|
    f.inputs do
      f.input :user
      f.input :total_amount
      f.input :status, as: :select, collection: Order.statuses.keys.map { |status| [status.humanize, status] }
      f.input :payment_intent_id, input_html: { readonly: true }
      f.input :recipient_name, input_html: { readonly: true }
      f.input :recipient_address, input_html: { readonly: true }
      f.input :province, input_html: { readonly: true }, collection: Province.pluck(:name, :id)
      f.has_many :order_items, allow_destroy: true do |item|
        item.input :product
        item.input :quantity
        item.input :price
      end
    end
    f.actions
  end
end



### app/admin/page.rb ###
ActiveAdmin.register Page do
  permit_params :title, :content

  form do |f|
    f.inputs 'Page Details' do
      f.input :title
      f.input :content, as: :quill_editor
    end
    f.actions
  end

  index do
    selectable_column
    id_column
    column :title
    column :content do |page|
      raw truncate(page.content, length: 100)
    end
    column :created_at
    column :updated_at
    actions
  end

  show do
    attributes_table do
      row :title
      row :content do |page|
        raw page.content
      end
    end
  end
end



### app/admin/products.rb ###
# app/admin/products.rb
ActiveAdmin.register Product do
  permit_params :name, :description, :price, :stock_quantity, :on_sale, :image, category_ids: []

  form do |f|
    f.inputs "Product Details" do
      f.input :name
      f.input :description
      f.input :price
      f.input :stock_quantity
      f.input :on_sale
      f.input :image, as: :file
      f.input :categories, as: :check_boxes, collection: Category.all
    end
    f.actions
  end

  show do
    attributes_table do
      row :name
      row :description
      row :price
      row :stock_quantity
      row :on_sale
      row :created_at
      row :updated_at
      row :categories do |product|
        product.categories.map(&:name).join(", ")
      end
      row :image do |product|
        if product.image.attached?
          image_tag url_for(product.image)
        else
          content_tag(:span, "No image attached")
        end
      end
    end
    active_admin_comments
  end

  index do
    selectable_column
    id_column
    column :name
    column :description
    column :price
    column :stock_quantity
    column :on_sale
    column :created_at
    column :updated_at
    column :categories do |product|
      product.categories.map(&:name).join(", ")
    end
    actions
  end

  filter :name
  filter :description
  filter :price
  filter :stock_quantity
  filter :on_sale, as: :select
  filter :created_at
  filter :updated_at
  filter :categories
end



### app/admin/provinces.rb ###
# app/admin/provinces.rb

ActiveAdmin.register Province do
  permit_params :name, :gst, :pst, :qst, :hst

  index do
    selectable_column
    id_column
    column :name
    column :gst
    column :pst
    column :qst
    column :hst  # Add the HST column here
    column :created_at
    column :updated_at
    actions
  end

  filter :name
  filter :gst
  filter :pst
  filter :qst
  filter :hst
  filter :created_at
  filter :updated_at

  show do
    attributes_table do
      row :name
      row :gst
      row :pst
      row :qst
      row :hst
      row :created_at
      row :updated_at
    end
    active_admin_comments
  end

  form do |f|
    f.inputs "Province Details" do
      f.input :name
      f.input :gst
      f.input :pst
      f.input :qst
      f.input :hst
    end
    f.actions
  end
end



### app/admin/users.rb ###
ActiveAdmin.register User do
  permit_params :username, :email, :address, :province_id, :encrypted_password

  index do
    selectable_column
    id_column
    column :username
    column :email
    column :address
    column :province
    column :encrypted_password
    actions
  end

  filter :username
  filter :email
  filter :address
  filter :province
  filter :created_at
  filter :updated_at

  form do |f|
    f.inputs do
      f.input :username
      f.input :email
      f.input :address
      f.input :province
    end
    f.actions
  end

  show do
    attributes_table do
      row :username
      row :email
      row :address
      row :province
      row :created_at
      row :updated_at
      row :encrypted_password
    end

    panel "Orders" do
      table_for user.orders do
        column :id
        column :total_amount
        column :status
        column :created_at
        column :updated_at
        column "Order Details" do |order|
          link_to "View Order", admin_order_path(order)
        end
      end
    end
  end
end



### app/assets/config/manifest.js ###
//= link_tree ../images
//= link_directory ../javascripts .js
//= link_directory ../stylesheets .css
//= link controllers/application.js
//= link controllers/hello_controller.js
//= link controllers/index.js
//= link_directory ../../javascript/controllers .js
//= link rails-ujs.js


### app/assets/images/.keep ###



### app/assets/javascripts/activeadmin/quill_editor/quill_editor.js ###
// Initialize Quill editor for ActiveAdmin
document.addEventListener("DOMContentLoaded", function() {
  var editors = document.querySelectorAll(".quill-editor");
  editors.forEach(function(editor) {
    new Quill(editor, {
      theme: "snow"
    });
  });
});



### app/assets/javascripts/active_admin.js ###
//= require active_admin/base
//= require rails-ujs
//= require activeadmin/quill_editor/quill_editor


### app/assets/javascripts/application.js ###
//= require rails-ujs
//= require activeadmin/quill_editor/quill_editor



### app/assets/stylesheets/active_admin/quill_editor/quill_editor.scss ###
.quill-editor {
  .ql-container {
    height: 400px;
  }
}


### app/assets/stylesheets/active_admin.scss ###
@import "active_admin/mixins";
@import "active_admin/base";
@import "active_admin/quill_editor/quill_editor";



### app/assets/stylesheets/application.css ###

body {
  font-family: Arial, sans-serif;
}

h1 {
  color: #2c3e50;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin: 10px 0;
}

img {
  max-width: 100px;
  height: auto;
  display: block;
  margin-bottom: 10px;
}

.btn {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  text-decoration: none;
  border-radius: 5px;
}

.btn-primary {
  background-color: #2980b9;
}

.btn:hover {
  background-color: #2980b9;
  color: white;
}
.alert {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
}
.alert-danger {
  color: #a94442;
  background-color: #f2dede;
  border-color: #ebccd1;
}
.alert-success {
  color: #3c763d;
  background-color: #dff0d8;
  border-color: #d6e9c6;
}



### app/channels/application_cable/channel.rb ###
module ApplicationCable
  class Channel < ActionCable::Channel::Base
  end
end



### app/channels/application_cable/connection.rb ###
module ApplicationCable
  class Connection < ActionCable::Connection::Base
  end
end



### app/controllers/admin_users/dashboard_controller.rb ###
# app/controllers/admin/dashboard_controller.rb
class Admin::DashboardController < ApplicationController
  before_action :authenticate_admin_user!

  def index

  end
end



### app/controllers/admin_users/passwords_controller.rb ###
class AdminUsers::PasswordsController < Devise::PasswordsController

end



### app/controllers/admin_users/registrations_controller.rb ###
class AdminUsers::RegistrationsController < Devise::RegistrationsController

end



### app/controllers/admin_users/sessions_controller.rb ###
# app/controllers/admin_users/sessions_controller.rb
class AdminUsers::SessionsController < Devise::SessionsController
  # GET /resource/sign_in
  def new
    super
  end

  # POST /resource/sign_in
  def create
    super
  end

  # DELETE /resource/sign_out
  def destroy
    sign_out(current_admin_user)
    redirect_to root_path, notice: 'You have been logged out.'
  end

  protected

  def after_sign_in_path_for(resource)
    admin_dashboard_path
  end

  # If you have extra params to permit, append them to the sanitizer.
  def configure_sign_in_params
    devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  end
end



### app/controllers/application_controller.rb ###
class ApplicationController < ActionController::Base
  before_action :ensure_cart_session

  private

  def ensure_cart_session
    session[:cart] ||= {}
  end

  def route_not_found
    render plain: "Route not found: #{params[:path]}", status: 404
  end
end



### app/controllers/cart_controller.rb ###
class CartController < ApplicationController
  before_action :authenticate_user!

  def show
    @cart = session[:cart] || {}
    @products = Product.where(id: @cart.keys.map(&:to_i))
    Rails.logger.debug "Cart contents: #{@cart.inspect}"
    Rails.logger.debug "Products retrieved: #{@products.inspect}"

    @cart_items = @cart.map do |id, quantity|
      product = @products.find { |p| p.id == id.to_i }
      Rails.logger.debug "Processing product: #{product.inspect}" if product
      { product: product, quantity: quantity } if product
    end.compact
    Rails.logger.debug "Cart items: #{@cart_items.inspect}"
  end

  def add
    id = params[:id].to_s
    cart = session[:cart] || {}
    cart[id] ? cart[id] += 1 : cart[id] = 1
    session[:cart] = cart
    Rails.logger.debug "Cart after add: #{session[:cart].inspect}"
    redirect_to cart_path
  end

  def update
    cart_params = cart_update_params
    id = cart_params[:id].to_s
    quantity = cart_params[:quantity].to_i
    cart = session[:cart] || {}

    Rails.logger.debug "Update action called with params: #{params.inspect}"
    Rails.logger.debug "Cart before update: #{cart.inspect}"
    Rails.logger.debug "id for update: #{id}"
    Rails.logger.debug "quantity for update: #{quantity}"

    if cart.key?(id)
      if quantity > 0
        cart[id] = quantity
        Rails.logger.debug "Item updated successfully."
      else
        cart.delete(id)
        Rails.logger.debug "Item removed due to zero quantity."
      end
    else
      Rails.logger.debug "Item not found in cart. #{id}"
    end

    session[:cart] = cart

    Rails.logger.debug "Cart after update: #{session[:cart].inspect}"

    redirect_to cart_path
  end

  def remove
    cart_params = cart_remove_params
    id = cart_params[:id].to_s
    cart = session[:cart] || {}

    Rails.logger.debug "Remove action called with params: #{params.inspect}"
    Rails.logger.debug "Cart before remove: #{cart.inspect}"
    Rails.logger.debug "id for remove: #{id}"

    if cart.key?(id)
      cart.delete(id)
      Rails.logger.debug "Item removed successfully."
    else
      Rails.logger.debug "Item not found in cart. #{id}"
    end

    session[:cart] = cart

    Rails.logger.debug "Cart after remove: #{session[:cart].inspect}"
    redirect_to cart_path
  end

  private

  def cart_update_params
    params.permit(:id, :quantity, :_method, :authenticity_token, :commit)
  end

  def cart_remove_params
    params.permit(:id, :_method, :authenticity_token)
  end
end



### app/controllers/categories_controller.rb ###
class CategoriesController < ApplicationController
  def show
    @category = Category.find(params[:id])
    @products = @category.products
  end
end



### app/controllers/concerns/.keep ###



### app/controllers/home_controller.rb ###
class HomeController < ApplicationController
  def index
    @products = Product.limit(5)
    @on_sale_products = Product.on_sale
    @new_products = Product.newly_added
    @recently_updated_products = Product.recently_updated
    @categories = Category.all
  end

  def search
    @categories = Category.all
    if params[:category_id].present?
      @products = Category.find(params[:category_id]).products.search(params[:keyword])
    else
      @products = Product.search(params[:keyword])
    end
    render :search
  end
end



### app/controllers/orders_controller.rb ###
# app/controllers/orders_controller.rb
class OrdersController < ApplicationController
  before_action :authenticate_user!
  before_action :ensure_user_has_province, only: [:new, :create]

  def index
    @orders = current_user.orders
  end

  def new
    @order = Order.new(user: current_user)
    if session[:cart].present?
      @order.add_items_from_cart(session[:cart])

      if params[:province_id].present?
        @order.province_id = params[:province_id]
      else
        @order.province_id = current_user.province_id if current_user.province_id.present?
      end

      @order.set_current_tax_rates
      @order.calculate_total_amount

      Rails.logger.debug "Order items in new action: #{@order.order_items.inspect}"
    end
  end


  def create
    @order = current_user.orders.build(order_params)
    @order.add_items_from_cart(session[:cart])
    @order.status = :new_order  # Set a default status

    # Ensure province is set
    @order.province = Province.find(order_params[:province_id])
    @order.set_current_tax_rates

    Rails.logger.debug "Order before saving: #{@order.inspect}"

    if @order.save
      session[:cart] = {}
      flash[:notice] = 'Order placed successfully'
      redirect_to new_order_payment_path(@order) # Redirect to payment page
    else
      Rails.logger.debug "Order save failed: #{@order.errors.full_messages}"
      flash[:alert] = 'Failed to place the order. Please try again.'
      render :new
    end
  end

  def recalculate_total
    province = Province.find(params[:province_id])
    @order = Order.new(user: current_user)
    @order.add_items_from_cart(session[:cart]) if session[:cart].present?
    @order.province = province
    @order.set_current_tax_rates
    @order.calculate_total_amount

    respond_to do |format|
      format.json { render json: { total_amount: @order.total_amount } }
    end
  end

  def show
    @order = current_user.orders.find(params[:id])
  end

  private

  def order_params
    params.require(:order).permit(:total_amount, :status, :province_id, :recipient_name, :recipient_address, order_items_attributes: [:product_id, :quantity, :price])
  end

  def ensure_user_has_province
    unless current_user.province
      redirect_to edit_user_registration_path, alert: 'Please update your profile with your province before placing an order.'
    end
  end
end



### app/controllers/pages_controller.rb ###
class PagesController < ApplicationController
  def show
    @page = Page.find(params[:id])
  end
end



### app/controllers/payments_controller.rb ###
# app/controllers/payments_controller.rb
class PaymentsController < ApplicationController
  before_action :authenticate_user!

  def new
    @order = Order.find(params[:order_id])
    @amount = (@order.total_amount * 100).to_i # Amount in cents

    if params[:use_stripe] == 'true'
      begin
        # Create a PaymentIntent with Stripe only if the order doesn't already have one
        unless @order.payment_intent_id.present?
          payment_intent = Stripe::PaymentIntent.create(
            amount: @amount,
            currency: 'usd',
            payment_method_types: ['card'],
            metadata: { order_id: @order.id }
          )
          @order.update(payment_intent_id: payment_intent.id)
        else
          payment_intent = Stripe::PaymentIntent.retrieve(@order.payment_intent_id)
        end

        # Retrieve the client secret for client-side use
        @client_secret = payment_intent.client_secret
        Rails.logger.debug "Client Secret payment controller: #{@client_secret}" # Debugging: Log the client_secret
      rescue Stripe::StripeError => e
        flash[:error] = e.message
        redirect_to new_order_payment_path(@order)
      end
    else
      # Payment is optional; proceed without Stripe
      @client_secret = nil
    end
  end

  def confirm
    @order = Order.find(params[:order_id]) # Ensure the order is retrieved

    if params[:use_stripe] == true
      payment_id = params[:payment_id]
      payment_intent = Stripe::PaymentIntent.retrieve(payment_id)

      if payment_intent.status == 'succeeded'
        @order.update(status: :paid_order) # Update order status to 'paid_order'
        flash[:notice] = 'Payment confirmed and order marked as paid.'
      else
        flash[:alert] = 'Payment confirmation failed.'
      end
    else
      # Proceed without payment

      flash[:notice] = 'Order confirmed without payment.'
    end

    redirect_to order_path(@order)
  end

  private

  def payment_successful?(order)
    if order.payment_intent_id.present?
      payment_intent = Stripe::PaymentIntent.retrieve(order.payment_intent_id)
      return payment_intent.status == 'succeeded'
    end
    false
  rescue Stripe::StripeError => e
    Rails.logger.error("Stripe error while checking payment: #{e.message}")
    false
  end
end



### app/controllers/products_controller.rb ###
class ProductsController < ApplicationController

  def index
    @q = Product.ransack(params[:q])
    @products = @q.result.page(params[:page]).per(10)

    if params[:filter] == "on_sale"
      @products = @products.on_sale
    elsif params[:filter] == "newly_added"
      @products = @products.newly_added
    elsif params[:filter] == "recently_updated"
      @products = @products.recently_updated
    end
  end

  def show
    @product = Product.find(params[:id])
  end
end



### app/controllers/users/passwords_controller.rb ###
# app/controllers/users/passwords_controller.rb
class Users::PasswordsController < Devise::PasswordsController
  # GET /resource/password/new
  def new
    super
  end

  # POST /resource/password
  def create
    super
  end

  # GET /resource/password/edit?reset_password_token=abcdef
  def edit
    super
  end

  # PUT /resource/password
  def update
    super
  end

  protected

  # If you have extra params to permit, append them to the sanitizer.
  def configure_reset_password_params
    devise_parameter_sanitizer.permit(:reset_password, keys: [:attribute])
  end
end



### app/controllers/users/registrations_controller.rb ###
# app/controllers/users/registrations_controller.rb
class Users::RegistrationsController < Devise::RegistrationsController
  before_action :configure_sign_up_params, only: [:create]
  before_action :configure_account_update_params, only: [:update]

  # GET /resource/sign_up
  def new
    super
  end

  # POST /resource
  def create
    super
  end

  # GET /resource/edit
  def edit
    super
  end

  # PUT /resource
  def update
    super
  end

  # DELETE /resource
  def destroy
    super
  end

  # GET /resource/cancel
  # Forces the session data which is usually expired after sign
  # in to be expired now. This is useful if the user wants to
  # cancel oauth signing in/up in the middle of the process,
  # removing all OAuth session data.
  def cancel
    super
  end

  protected

  # If you have extra params to permit, append them to the sanitizer.
  def configure_sign_up_params
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username, :address, :province_id])
  end

  # If you have extra params to permit, append them to the sanitizer.
  def configure_account_update_params
    devise_parameter_sanitizer.permit(:account_update, keys: [:username, :address, :province_id])
  end

  # The path used after sign up.
  def after_sign_up_path_for(resource)
    super(resource)
  end

  # The path used after sign up for inactive accounts.
  def after_inactive_sign_up_path_for(resource)
    super(resource)
  end
end



### app/controllers/users/sessions_controller.rb ###
# app/controllers/users/sessions_controller.rb
class Users::SessionsController < Devise::SessionsController
  # GET /resource/sign_in
  def new
    super
  end

  # POST /resource/sign_in
  def create
    super
  end

  # DELETE /resource/sign_out
  def destroy
    super
  end

  protected

  def after_sign_in_path_for(resource)
    root_path
  end

  # If you have extra params to permit, append them to the sanitizer.
  def configure_sign_in_params
    devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  end
end



### app/helpers/admin_users/passwords_helper.rb ###
module AdminUsers::PasswordsHelper
end



### app/helpers/admin_users/registrations_helper.rb ###
module AdminUsers::RegistrationsHelper
end



### app/helpers/admin_users/sessions_helper.rb ###
module AdminUsers::SessionsHelper
end



### app/helpers/application_helper.rb ###
module ApplicationHelper
end



### app/inputs/quill_editor_input.rb ###
class QuillEditorInput < Formtastic::Inputs::TextInput
  def to_html
    input_wrapping do
      label_html <<
      builder.text_area(method, input_html_options) <<
      quill_editor_js
    end
  end

  private

  def quill_editor_js
    <<-HTML.html_safe
      <script>
        document.addEventListener("DOMContentLoaded", function() {
          var quill = new Quill('##{dom_id}', {
            theme: 'snow'
          });
        });
      </script>
    HTML
  end

  def dom_id
    "#{object_name}_#{method}"
  end
end



### app/javascript/application.js ###
import Rails from "@rails/ujs"
Rails.start()

import "@hotwired/turbo-rails"
import "controllers"



### app/javascript/controllers/application.js ###
import { Application } from "@hotwired/stimulus"

const application = Application.start()

// Configure Stimulus development experience
application.debug = false
window.Stimulus   = application

export { application }



### app/javascript/controllers/hello_controller.js ###
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
    this.element.textContent = "Hello World!"
  }
}



### app/javascript/controllers/index.js ###
// Import and register all your controllers from the importmap under controllers/*

import { application } from "controllers/application"

// Eager load all controllers defined in the import map under controllers/**/*_controller
import { eagerLoadControllersFrom } from "@hotwired/stimulus-loading"
eagerLoadControllersFrom("controllers", application)

// Lazy load controllers as they appear in the DOM (remember not to preload controllers in import map!)
// import { lazyLoadControllersFrom } from "@hotwired/stimulus-loading"
// lazyLoadControllersFrom("controllers", application)



### app/javascript/packs/application.js ###
import Rails from "@rails/ujs"
Rails.start()




### app/jobs/application_job.rb ###
class ApplicationJob < ActiveJob::Base
  # Automatically retry jobs that encountered a deadlock
  # retry_on ActiveRecord::Deadlocked

  # Most jobs are safe to ignore if the underlying records are no longer available
  # discard_on ActiveJob::DeserializationError
end



### app/mailers/application_mailer.rb ###
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end



### app/models/admin_user.rb ###
class AdminUser < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable,
         :recoverable, :rememberable, :validatable

    def self.ransackable_attributes(auth_object = nil)
    ["created_at", "email", "encrypted_password", "id", "id_value", "remember_created_at", "reset_password_sent_at", "reset_password_token", "updated_at"]
  end
end



### app/models/application_record.rb ###
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end



### app/models/category.rb ###
class Category < ApplicationRecord
  has_many :product_categories
  has_many :products, through: :product_categories

  validates :name, presence: true

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "id", "name", "updated_at"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["product_categories", "products"]
  end
end



### app/models/concerns/.keep ###



### app/models/order.rb ###
# app/models/order.rb
class Order < ApplicationRecord
  belongs_to :user
  belongs_to :province, optional: true
  has_many :order_items, dependent: :destroy
  accepts_nested_attributes_for :order_items

  validates :total_amount, :status, presence: true
  validates :payment_intent_id, presence: true, if: :stripe_payment?

  enum status: { new_order: 0, paid_order: 1, shipped: 2 }

  # Serialize metadata to store additional data like user_name and address
  store :metadata, accessors: [:recipient_name, :recipient_address], coder: JSON

  def needs_payment?
    status == "new_order" && !payment_intent_id
  end

  def add_items_from_cart(cart)
    cart.each do |id, quantity|
      begin
        product = Product.find(id)
        Rails.logger.debug "Adding product: #{product.name}, Quantity: #{quantity}, Price: #{product.price}"
        order_items.build(product: product, quantity: quantity, price: product.price)
      rescue ActiveRecord::RecordNotFound
        Rails.logger.error "Product with id #{id} not found."
      end
    end
  end

  def calculate_total_amount
    subtotal = order_items.sum { |item| item.quantity * item.price }
    Rails.logger.debug "Subtotal: #{subtotal}"

    gst_rate = self.gst_rate || province&.gst || 0
    pst_rate = self.pst_rate || province&.pst || 0
    qst_rate = self.qst_rate || province&.qst || 0
    hst_rate = self.hst_rate || province&.hst || 0

    # Log the tax rates to debug
    Rails.logger.debug "GST Rate: #{gst_rate}, PST Rate: #{pst_rate}, QST Rate: #{qst_rate}, HST Rate: #{hst_rate}"

    # Use stored tax rates for the order
    gst = subtotal * (gst_rate / 100.0)
    pst = subtotal * (pst_rate / 100.0)
    qst = subtotal * (qst_rate / 100.0)
    hst = subtotal * (hst_rate / 100.0)

    self.total_amount = subtotal + gst + pst + qst + hst
    Rails.logger.debug "Calculated total amount: #{self.total_amount}"
  end

  def stripe_payment?
    payment_intent_id.present?
  end

  def set_current_tax_rates
    # Set current tax rates from the user's province
    if province.present?
      self.gst_rate ||= province.gst || 0
      self.pst_rate ||= province.pst || 0
      self.qst_rate ||= province.qst || 0
      self.hst_rate ||= province.hst || 0
    else
      Rails.logger.error "Province not set for order: #{self.id}"
    end
  end

  before_save :calculate_total_amount

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "id", "status", "total_amount", "updated_at", "user_id","payment_intent_id"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["order_items", "user", "province"]
  end
end



### app/models/order_item.rb ###
class OrderItem < ApplicationRecord
  belongs_to :order
  belongs_to :product

  validates :quantity, :price, presence: true

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "id", "order_id", "price", "product_id", "quantity", "updated_at"]
  end
end



### app/models/page.rb ###
### app/models/page.rb ###
class Page < ApplicationRecord
  # Define the ransackable attributes for the Page model
  def self.ransackable_attributes(auth_object = nil)
    %w[content created_at id title updated_at]
  end
end



### app/models/product.rb ###
# app/models/product.rb
class Product < ApplicationRecord
  has_many :order_items
  has_many :product_categories
  has_many :categories, through: :product_categories
  has_one_attached :image

  validates :name, :description, :price, :stock_quantity, presence: true

  scope :on_sale, -> { where(on_sale: true) }
  scope :newly_added, -> { where('created_at >= ?', 3.days.ago) }
  scope :recently_updated, -> { where('updated_at >= ?', 3.days.ago).where('created_at < ?', 3.days.ago) }

  def self.search(keyword)
    where('name LIKE ? OR description LIKE ?', "%#{keyword}%", "%#{keyword}%")
  end

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "description", "id", "name", "price", "stock_quantity", "updated_at", "on_sale"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["categories", "image_attachment", "image_blob", "order_items", "product_categories"]
  end

  def resize_image(image)
    begin
      Rails.logger.debug "Resizing image with variant resize: '300x300'"
      image.variant(resize: "300x300").processed
    rescue => e
      Rails.logger.error "Image processing error: #{e.message}"
      nil
    end
  end
end



### app/models/product_category.rb ###
class ProductCategory < ApplicationRecord
  belongs_to :product
  belongs_to :category

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "id", "category_id", "product_id", "updated_at"]
  end
end



### app/models/province.rb ###
class Province < ApplicationRecord
  has_many :users
  validates :name, presence: true
  validates :gst, :pst, :hst, :qst, presence: true, numericality: { greater_than_or_equal_to: 0 }

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "gst", "hst", "id", "name", "pst", "qst", "updated_at"]
  end
  def self.ransackable_associations(auth_object = nil)
    ["users"]
  end
end



### app/models/user.rb ###
class User < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable
  belongs_to :province, optional: true
  has_many :orders, dependent: :destroy

  validates :address, presence: true, if: -> { province_id.present? }
  validates :username, :email, presence: true
  validates :email, uniqueness: true
  validates :province_id, presence: true, on: :update

  def self.ransackable_attributes(auth_object = nil)
    ["address", "created_at", "email", "id", "province_id", "updated_at", "username"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["orders", "province"]
  end
end



### app/policies/application_policy.rb ###
# frozen_string_literal: true

class ApplicationPolicy
  attr_reader :user, :record

  def initialize(user, record)
    @user = user
    @record = record
  end

  def index?
    false
  end

  def show?
    false
  end

  def create?
    false
  end

  def new?
    create?
  end

  def update?
    false
  end

  def edit?
    update?
  end

  def destroy?
    false
  end

  class Scope
    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      raise NoMethodError, "You must define #resolve in #{self.class}"
    end

    private

    attr_reader :user, :scope
  end
end



### app/policies/product_policy.rb ###
class ProductPolicy < ApplicationPolicy
  # NOTE: Up to Pundit v2.3.1, the inheritance was declared as
  # `Scope < Scope` rather than `Scope < ApplicationPolicy::Scope`.
  # In most cases the behavior will be identical, but if updating existing
  # code, beware of possible changes to the ancestors:
  # https://gist.github.com/Burgestrand/4b4bc22f31c8a95c425fc0e30d7ef1f5

  class Scope < ApplicationPolicy::Scope
    # NOTE: Be explicit about which records you allow access to!
    # def resolve
    #   scope.all
    # end
  end
end



### app/views/admin_users/sessions/new.html.erb ###
<h2>Admin Log in</h2>

<%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="field">
    <%= f.label :password %><br />
    <%= f.password_field :password, autocomplete: "current-password" %>
  </div>

  <% if devise_mapping.rememberable? %>
    <div class="field">
      <%= f.check_box :remember_me %>
      <%= f.label :remember_me %>
    </div>
  <% end %>

  <div class="actions">
    <%= f.submit "Log in" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

<% if flash[:alert] %>
  <div class="alert alert-danger"><%= flash[:alert] %></div>
<% end %>

<% if flash[:notice] %>
  <div class="alert alert-success"><%= flash[:notice] %></div>
<% end %>



### app/views/cart/show.html.erb ###
<!-- app/views/cart/show.html.erb -->
<h1>Your Shopping Cart</h1>
<table>
  <thead>
    <tr>
      <th>Product</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Total</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% if @cart_items.any? %>
      <% @cart_items.each do |item| %>
        <tr>
          <td><%= item[:product].name %></td>
          <td>
             <%= form_with url: update_cart_path(item[:product].id), method: :patch, local: true do |f| %>
              <%= f.hidden_field :id, value: item[:product].id %>
              <%= f.number_field :quantity, value: item[:quantity], min: 1 %>
              <%= f.submit "Update" %>
            <% end %>
          </td>
          <td><%= number_to_currency(item[:product].price) %></td>
          <td><%= number_to_currency(item[:product].price * item[:quantity]) %></td>

  <td> <%= button_to "Remove", remove_from_cart_path(item[:product].id), method: :delete, data: { confirm: "Are you sure?" } %></td>
        </tr>
      <% end %>
    <% else %>
      <tr>
        <td colspan="5">Your cart is empty.</td>
      </tr>
    <% end %>
  </tbody>
</table>
<%= link_to 'Continue Shopping', root_path %>
<%= link_to 'Checkout', new_order_path %>



### app/views/categories/show.html.erb ###
<h1><%= @category.name %> Products</h1>
<ul>
  <% @products.each do |product| %>
    <li>
      <%= link_to product.name, product_path(product) %>
      - <%= number_to_currency(product.price) %>
    </li>
  <% end %>
</ul>
<%= link_to 'Back to Home', root_path %>



### app/views/devise/confirmations/new.html.erb ###
<h2>Resend confirmation instructions</h2>

<%= form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email", value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email) %>
  </div>

  <div class="actions">
    <%= f.submit "Resend confirmation instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>



### app/views/devise/mailer/confirmation_instructions.html.erb ###
<p>Welcome <%= @email %>!</p>

<p>You can confirm your account email through the link below:</p>

<p><%= link_to 'Confirm my account', confirmation_url(@resource, confirmation_token: @token) %></p>



### app/views/devise/mailer/email_changed.html.erb ###
<p>Hello <%= @email %>!</p>

<% if @resource.try(:unconfirmed_email?) %>
  <p>We're contacting you to notify you that your email is being changed to <%= @resource.unconfirmed_email %>.</p>
<% else %>
  <p>We're contacting you to notify you that your email has been changed to <%= @resource.email %>.</p>
<% end %>



### app/views/devise/mailer/password_change.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>We're contacting you to notify you that your password has been changed.</p>



### app/views/devise/mailer/reset_password_instructions.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>Someone has requested a link to change your password. You can do this through the link below.</p>

<p><%= link_to 'Change my password', edit_password_url(@resource, reset_password_token: @token) %></p>

<p>If you didn't request this, please ignore this email.</p>
<p>Your password won't change until you access the link above and create a new one.</p>



### app/views/devise/mailer/unlock_instructions.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>Your account has been locked due to an excessive number of unsuccessful sign in attempts.</p>

<p>Click the link below to unlock your account:</p>

<p><%= link_to 'Unlock my account', unlock_url(@resource, unlock_token: @token) %></p>



### app/views/devise/passwords/edit.html.erb ###
<h2>Change your password</h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>
  <%= f.hidden_field :reset_password_token %>

  <div class="field">
    <%= f.label :password, "New password" %><br />
    <% if @minimum_password_length %>
      <em>(<%= @minimum_password_length %> characters minimum)</em><br />
    <% end %>
    <%= f.password_field :password, autofocus: true, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation, "Confirm new password" %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="actions">
    <%= f.submit "Change my password" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>



### app/views/devise/passwords/new.html.erb ###
<h2>Forgot your password?</h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="actions">
    <%= f.submit "Send me reset password instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>



### app/views/devise/registrations/edit.html.erb ###
<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :username %><br />
    <%= f.text_field :username %>
  </div>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
  <% end %>

  <div class="field">
    <%= f.label :password %> <i>(leave blank if you don't want to change it)</i><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
    <% if @minimum_password_length %>
      <br />
      <em><%= @minimum_password_length %> characters minimum</em>
    <% end %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :current_password %> <i>(we need your current password to confirm your changes)</i><br />
    <%= f.password_field :current_password, autocomplete: "current-password" %>
  </div>

  <div class="field">
    <%= f.label :address %><br />
    <%= f.text_field :address %>
  </div>

  <div class="field">
    <%= f.label :province %><br />
    <%= f.collection_select :province_id, Province.all, :id, :name %>
  </div>

  <div class="actions">
    <%= f.submit "Update" %>
  </div>
<% end %>

<h3>Cancel my account</h3>

<div>Unhappy? <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" }, method: :delete %></div>

<%= link_to "Back", :back %>



### app/views/devise/registrations/new.html.erb ###
<h2>Sign up</h2>
<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :username %><br />
    <%= f.text_field :username %>
  </div>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

<div class="field">
    <%= f.label :password %>
    <% if @minimum_password_length %>
    <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :address %><br />
    <%= f.text_field :address %>
  </div>

  <div class="field">
    <%= f.label :province %><br />
    <%= f.collection_select :province_id, Province.all, :id, :name %>
  </div>

  <div class="actions">
    <%= f.submit "Sign up" %>
  </div>
<% end %>
<%= render "devise/shared/links" %>



### app/views/devise/sessions/new.html.erb ###
<h2>User Log in</h2>

<%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="field">
    <%= f.label :password %><br />
    <%= f.password_field :password, autocomplete: "current-password" %>
  </div>

  <% if devise_mapping.rememberable? %>
    <div class="field">
      <%= f.check_box :remember_me %>
      <%= f.label :remember_me %>
    </div>
  <% end %>

  <div class="actions">
    <%= f.submit "Log in" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

<% if flash[:alert] %>
  <div class="alert alert-danger"><%= flash[:alert] %></div>
<% end %>

<% if flash[:notice] %>
  <div class="alert alert-success"><%= flash[:notice] %></div>
<% end %>



### app/views/devise/shared/_error_messages.html.erb ###
<% if resource.errors.any? %>
  <div id="error_explanation" data-turbo-cache="false">
    <h2>
      <%= I18n.t("errors.messages.not_saved",
                 count: resource.errors.count,
                 resource: resource.class.model_name.human.downcase)
       %>
    </h2>
    <ul>
      <% resource.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>



### app/views/devise/shared/_links.html.erb ###
<%- if controller_name != 'sessions' %>
  <%= link_to "Log in", new_session_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= button_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), data: { turbo: false } %><br />
  <% end %>
<% end %>



### app/views/devise/unlocks/new.html.erb ###
<h2>Resend unlock instructions</h2>

<%= form_for(resource, as: resource_name, url: unlock_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="actions">
    <%= f.submit "Resend unlock instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>



### app/views/home/index.html.erb ###
<h1>Welcome to Amazonia Pet Supplies</h1>
<p>Your one-stop shop for all your pet supply needs!</p>

<%= form_with url: search_path, method: :get, local: true do %>
  <div class="form-group">
    <%= label_tag :keyword, 'Search by keyword:' %>
    <%= text_field_tag :keyword, params[:keyword], class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= label_tag :category_id, 'Filter by category:' %>
    <%= select_tag :category_id, options_from_collection_for_select(@categories, :id, :name, params[:category_id]), include_blank: true, class: 'form-control' %>
  </div>
  <%= submit_tag 'Search', class: 'btn btn-primary' %>
<% end %>

<h2>Search Results</h2>
<% if @products.present? %>
  <ul>
    <% @products.each do |product| %>
      <li>
        <%= link_to product.name, product_path(product) %>
        - <%= number_to_currency(product.price) %>
      </li>
    <% end %>
  </ul>
<% else %>
  <p>No products found</p>
<% end %>

<%= link_to 'View Cart', cart_path, class: 'btn btn-primary' %>


### app/views/home/search.html.erb ###
<!-- app/views/home/search.html.erb -->
<h1>Search Results</h1>

<%= form_with url: search_path, method: :get, local: true do %>
  <div class="form-group">
    <%= label_tag :keyword, 'Search by keyword:' %>
    <%= text_field_tag :keyword, params[:keyword], class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= label_tag :category_id, 'Filter by category:' %>
    <%= select_tag :category_id, options_from_collection_for_select(@categories, :id, :name, params[:category_id]), include_blank: true, class: 'form-control' %>
  </div>
  <%= submit_tag 'Search', class: 'btn btn-primary' %>
<% end %>

<% if @products.present? %>
  <ul>
    <% @products.each do |product| %>
      <li>
        <%= link_to product.name, product_path(product) %>
        - <%= number_to_currency(product.price) %>
        <% if product.image.attached? %>
          <%= image_tag url_for(product.image), alt: product.name %>
        <% end %>
      </li>
    <% end %>
  </ul>
<% else %>
  <p>No products found</p>
<% end %>



### app/views/layouts/active_admin.html.erb ###
<!DOCTYPE html>
<html>
  <head>
    <title>Amazonia Pet Supplies</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "active_admin", "data-turbo-track": "reload" %>
    <%= javascript_pack_tag 'active_admin' %>
      </head>

  <body>
    <div id="active_admin_content">
      <%= yield %>
    </div>
    <footer>
      <nav>
        <%= link_to "Logout", custom_destroy_admin_user_session_path, method: :delete, data: { confirm: 'Are you sure?' } %>
      </nav>
    </footer>
  </body>
</html>



### app/views/layouts/application.html.erb ###
<!DOCTYPE html>
<html>
  <head>
    <title>AmazoniaPetSupplies</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

  </head>


  <body>
    <nav>
      <ul>
        <li><%= link_to 'Home', root_path %></li>
        <li><%= link_to 'About', page_path(Page.find_by(title: 'About')) %></li>
        <li><%= link_to 'Contact', page_path(Page.find_by(title: 'Contact')) %></li>
        <li><%= link_to 'Products', products_path %></li>
        <% if user_signed_in? %>
          <li><%= link_to 'Orders', orders_path %></li> <!-- Link to orders page -->
          <li><%= link_to 'Logout', custom_destroy_user_session_path, method: :delete %></li>
        <% else %>
          <li><%= link_to 'Login', new_user_session_path %></li>
          <li><%= link_to 'Sign Up', new_user_registration_path %></li>
        <% end %>
      </ul>
    </nav>
  <% if flash[:notice] %>
    <div class="alert alert-success"><%= flash[:notice] %></div>
  <% end %>
  <% if flash[:alert] %>
    <div class="alert alert-danger"><%= flash[:alert] %></div>
  <% end %>
  <% if flash[:error] %>
    <div class="alert alert-danger"><%= flash[:error] %></div>
  <% end %>
    <%= yield %>
  </body>
</html>


### app/views/layouts/mailer.html.erb ###
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>



### app/views/layouts/mailer.text.erb ###
<%= yield %>



### app/views/orders/index.html.erb ###
<!-- app/views/orders/index.html.erb -->
<h1>Your Orders</h1>

<% if @orders.any? %>
  <table>
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Total Amount</th>
        <th>Status</th>
        <th>Order Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% @orders.each do |order| %>
        <tr>
          <td><%= order.id %></td>
          <td><%= number_to_currency(order.total_amount) %></td>
          <td><%= order.status.humanize %></td>
          <td><%= order.created_at.strftime("%Y-%m-%d") %></td>
          <td><%= link_to 'View', order_path(order) %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
<% else %>
  <p>You have no orders.</p>
<% end %>



### app/views/orders/new.html.erb ###
<!-- app/views/orders/new.html.erb -->
<h1>Checkout</h1>
<%= form_with model: @order, local: true, id: 'order_form' do |form| %>
  <div>
    <%= form.label :recipient_name, "Recipient Name" %>
    <%= form.text_field :recipient_name, value: current_user.username %>
  </div>
  <div>
    <%= form.label :recipient_address, "Recipient Address" %>
    <%= form.text_field :recipient_address, value: current_user.address %>
  </div>
  <div>
    <%= form.label :province %>
    <%= form.collection_select :province_id, Province.all, :id, :name, selected: current_user.province_id, id: 'order_province_id' %>
  </div>
  <div>
    <%= form.label :total_amount %>
    <%= form.number_field :total_amount, value: @order.total_amount, readonly: true, id: "order_total_amount" %>
  </div>
  <%= form.submit 'Place Order' %>
  <button type="button" onclick="updateTotal()">Update Total</button>
<% end %>

<script>
  function updateTotal() {
    const provinceId = document.querySelector('#order_province_id').value;

    fetch('/orders/recalculate_total', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': '<%= form_authenticity_token %>'
      },
      body: JSON.stringify({ province_id: provinceId })
    })
    .then(response => response.json())
    .then(data => {
      document.querySelector('#order_total_amount').value = data.total_amount;
    })
    .catch(error => console.error('Error:', error));
  }
</script>



### app/views/orders/show.html.erb ###
<!-- app/views/orders/show.html.erb -->
<h1>Order Details</h1>

<p><strong>Order ID:</strong> <%= @order.id %></p>
<p><strong>Status:</strong> <%= @order.status.humanize %></p>
<% if session[:recipient_name] %>
<h2>Recipient Details</h2>
<ul>
  <li><strong>Recipient Name:</strong> <%= session[:recipient_name] %></li>
  <li><strong>Recipient Address:</strong> <%= session[:recipient_address] %></li>
</ul>
<% end %>
<h2>Order Items</h2>
<ul>
  <% @order.order_items.each do |item| %>
    <li>
      <%= item.product.name %> - Quantity: <%= item.quantity %> - Price: <%= number_to_currency(item.price) %>
    </li>
  <% end %>
</ul>

<h2>Taxes</h2>
<p><strong>GST:</strong> <%= number_to_currency(@order.total_amount * @order.gst_rate / 100.0) %></p>
<p><strong>PST:</strong> <%= number_to_currency(@order.total_amount * @order.pst_rate / 100.0) %></p>
<p><strong>QST:</strong> <%= number_to_currency(@order.total_amount * @order.qst_rate / 100.0) %></p>
<p><strong>HST:</strong> <%= number_to_currency(@order.total_amount * @order.hst_rate / 100.0) %></p>

<p><strong>Grand Total:</strong> <%= number_to_currency(@order.total_amount) %></p>

<% if @order.new_order? %>
  <h3>Payment Options</h3>
  <p>This order is pending payment. Please choose one of the following payment options:</p>
  <%= link_to 'Proceed to Payment', new_order_payment_path(@order, use_stripe: true), class: 'button' %>
<% end %>



### app/views/pages/show.html.erb ###

<h1><%= @page.title %></h1>
<div>
  <%= raw @page.content %>
</div>


### app/views/payments/new.html.erb ###
<!-- app/views/payments/new.html.erb -->
<h1>Checkout</h1>

<p>Order ID: <%= @order.id %></p>
<p>Total Amount: <%= number_to_currency(@order.total_amount) %></p>

<%= form_with url: order_payments_path(@order), method: :post, local: true, id: 'payment-form' do %>
  <div id="payment-options">
    <p>Please select your payment option:</p>
    <label>
      <%= radio_button_tag 'use_stripe', 'true', params[:use_stripe] == 'true' %>
      Pay with Stripe
    </label>
    <label>
      <%= radio_button_tag 'use_stripe', 'false', params[:use_stripe] != 'true' %>
      Proceed without Payment
    </label>
  </div>

  <div id="stripe-payment" style="display: none; max-width: 30%">
    <div id="card-element"><!-- Stripe.js injects the Card Element --></div>
    <div id="card-errors" role="alert" style="color: red;"></div> <!-- To show errors -->
  </div>

  <!-- Use a hidden field to pass the client_secret to JavaScript -->
  <%= hidden_field_tag :client_secret, @client_secret, id: 'client-secret' %>

  <%= submit_tag 'Confirm Order', id: 'confirm-button' %>
<% end %>

<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Stripe with the publishable key
    const stripe = Stripe('<%= Rails.configuration.stripe[:publishable_key] %>');
    const elements = stripe.elements();
    const cardElement = elements.create('card');
    cardElement.mount('#card-element');

    // Handle card errors
    cardElement.on('change', ({ error }) => {
      const displayError = document.getElementById('card-errors');
      if (error) {
        displayError.textContent = error.message;
      } else {
        displayError.textContent = '';
      }
    });

    const form = document.getElementById('payment-form');
    const stripePayment = document.getElementById('stripe-payment');

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const useStripe = document.querySelector('input[name="use_stripe"]:checked').value;
      if (useStripe === 'true') {
        // Retrieve the client_secret from the hidden field
        const clientSecret = document.getElementById('client-secret').value;

        // Debug: Log the clientSecret to ensure it's not empty
        console.log('Client Secret:', clientSecret);

        // Ensure clientSecret is not empty before proceeding
        if (!clientSecret) {
          alert('Stripe client secret not available.');
          return;
        }

        try {
          // Confirm the card payment using the client secret
          const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
              card: cardElement
            }
          });

          if (error) {
            document.getElementById('card-errors').textContent = error.message;
            console.error('Stripe Error:', error);
          } else if (paymentIntent.status === 'succeeded') {
            // Wait for the response to complete before proceeding
            const response = await fetch('<%= confirm_order_payments_path(@order) %>', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': '<%= form_authenticity_token %>'
              },
              body: JSON.stringify({ payment_id: paymentIntent.id, use_stripe: true })
            });

            if (response.ok) {
              window.location.href = '<%= order_path(@order) %>';
            } else {
              alert('Payment confirmation failed.');
            }
          }
        } catch (e) {
          console.error('Error during payment processing:', e);
          alert('An unexpected error occurred. Please try again.');
        }
      } else {
        // Proceed without payment
        try {
          const response = await fetch('<%= confirm_order_payments_path(@order) %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': '<%= form_authenticity_token %>'
            },
            body: JSON.stringify({ use_stripe: false }) // Include use_stripe
          });

          if (response.ok) {
            window.location.href = '<%= order_path(@order) %>';
          } else {
            alert('Order confirmation failed.');
          }
        } catch (e) {
          console.error('Error during order confirmation:', e);
          alert('An unexpected error occurred. Please try again.');
        }
      }
    });

    const radioButtons = document.querySelectorAll('input[name="use_stripe"]');
    radioButtons.forEach(button => {
      button.addEventListener('change', () => {
        if (button.value === 'true') {
          stripePayment.style.display = 'block';
        } else {
          stripePayment.style.display = 'none';
        }
      });
    });

    const initialPaymentOption = document.querySelector('input[name="use_stripe"]:checked').value;
    if (initialPaymentOption === 'true') {
      stripePayment.style.display = 'block';
    }
  });
</script>



### app/views/products/index.html.erb ###

<h1>Available Products</h1>

<%= link_to "All Products", products_path %> |
<%= link_to "On Sale", products_path(filter: "on_sale") %> |
<%= link_to "Newly Added", products_path(filter: "newly_added") %> |
<%= link_to "Recently Updated", products_path(filter: "recently_updated") %>

<%= search_form_for @q, url: products_path, method: :get do |f| %>
  <div>
    <%= f.label :name_cont, "Keyword" %>
    <%= f.search_field :name_cont %>
  </div>
  <div>
    <%= f.label :categories_id_eq, "Category" %>
    <%= f.collection_select :categories_id_eq, Category.all, :id, :name, include_blank: "All Categories" %>
  </div>
  <div>
    <%= f.submit "Search" %>
  </div>
<% end %>

<% @products.each do |product| %>
  <%= render partial: "product", locals: { product: product } %>
<% end %>

<%= paginate @products %>



### app/views/products/search.html.erb ###
<!-- app/views/home/search.html.erb -->
<h1>Search Results</h1>

<%= form_with url: search_path, method: :get, local: true do %>
  <div class="form-group">
    <%= label_tag :keyword, 'Search by keyword:' %>
    <%= text_field_tag :keyword, params[:keyword], class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= label_tag :category_id, 'Filter by category:' %>
    <%= select_tag :category_id, options_from_collection_for_select(@categories, :id, :name, params[:category_id]), include_blank: true, class: 'form-control' %>
  </div>
  <%= submit_tag 'Search', class: 'btn btn-primary' %>
<% end %>

<% if @products.present? %>
  <ul>
    <% @products.each do |product| %>
      <li>
        <%= link_to product.name, product_path(product) %>
        - <%= number_to_currency(product.price) %>
        <%= image_tag @product.image.variant(resize_to_limit: [300, 300]) if @product.image.attached? %>

      </li>
    <% end %>
  </ul>
<% else %>
  <p>No products found</p>
<% end %>



### app/views/products/show.html.erb ###
<h1><%= @product.name %></h1>
<p><%= @product.description %></p>
<p><%= number_to_currency(@product.price) %></p>
<p>Stock Quantity: <%= @product.stock_quantity %></p>

<%= image_tag @product.image.variant(resize_to_limit: [300, 300]) if @product.image.attached? %>


<%= button_to 'Add to Cart', add_to_cart_path(@product), method: :post %>
<%= link_to 'Back to Products', root_path %>



### app/views/products/_form.html.erb ###
<%= form.input :name %>
<%= form.input :description %>
<%= form.input :price %>
<%= form.input :stock_quantity %>
<%= form.input :image, as: :file %>



### app/views/products/_product.html.erb ###
<div class="product">
  <h2><%= link_to product.name, product_path(product) %></h2>
  <p><%= product.description %></p>
  <p><%= number_to_currency(product.price) %></p>
  <%= image_tag product.image.variant(resize_to_limit: [300, 300]) if product.image.attached? %>


</div>



### app/views/users/confirmations/new.html.erb ###
<h2>Resend confirmation instructions</h2>

<%= form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "users/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email", value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email) %>
  </div>

  <div class="actions">
    <%= f.submit "Resend confirmation instructions" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### app/views/users/mailer/confirmation_instructions.html.erb ###
<p>Welcome <%= @email %>!</p>

<p>You can confirm your account email through the link below:</p>

<p><%= link_to 'Confirm my account', confirmation_url(@resource, confirmation_token: @token) %></p>



### app/views/users/mailer/email_changed.html.erb ###
<p>Hello <%= @email %>!</p>

<% if @resource.try(:unconfirmed_email?) %>
  <p>We're contacting you to notify you that your email is being changed to <%= @resource.unconfirmed_email %>.</p>
<% else %>
  <p>We're contacting you to notify you that your email has been changed to <%= @resource.email %>.</p>
<% end %>



### app/views/users/mailer/password_change.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>We're contacting you to notify you that your password has been changed.</p>



### app/views/users/mailer/reset_password_instructions.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>Someone has requested a link to change your password. You can do this through the link below.</p>

<p><%= link_to 'Change my password', edit_password_url(@resource, reset_password_token: @token) %></p>

<p>If you didn't request this, please ignore this email.</p>
<p>Your password won't change until you access the link above and create a new one.</p>



### app/views/users/mailer/unlock_instructions.html.erb ###
<p>Hello <%= @resource.email %>!</p>

<p>Your account has been locked due to an excessive number of unsuccessful sign in attempts.</p>

<p>Click the link below to unlock your account:</p>

<p><%= link_to 'Unlock my account', unlock_url(@resource, unlock_token: @token) %></p>



### app/views/users/passwords/edit.html.erb ###
<h2>Change your password</h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "users/shared/error_messages", resource: resource %>
  <%= f.hidden_field :reset_password_token %>

  <div class="field">
    <%= f.label :password, "New password" %><br />
    <% if @minimum_password_length %>
      <em>(<%= @minimum_password_length %> characters minimum)</em><br />
    <% end %>
    <%= f.password_field :password, autofocus: true, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation, "Confirm new password" %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="actions">
    <%= f.submit "Change my password" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### app/views/users/passwords/new.html.erb ###
<h2>Forgot your password?</h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "users/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="actions">
    <%= f.submit "Send me reset password instructions" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### app/views/users/registrations/edit.html.erb ###
<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "users/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
  <% end %>

  <div class="field">
    <%= f.label :password %> <i>(leave blank if you don't want to change it)</i><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
    <% if @minimum_password_length %>
      <br />
      <em><%= @minimum_password_length %> characters minimum</em>
    <% end %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :current_password %> <i>(we need your current password to confirm your changes)</i><br />
    <%= f.password_field :current_password, autocomplete: "current-password" %>
  </div>


  <div class="field">
    <%= f.label :address %><br />
    <%= f.text_field :address %>
  </div>

  <div class="field">
    <%= f.label :province %><br />
    <%= f.collection_select :province_id, Province.all, :id, :name %>
  </div>

  <div class="actions">
    <%= f.submit "Update" %>
  </div>
<% end %>

<h3>Cancel my account</h3>

<div>Unhappy? <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" }, method: :delete %></div>

<%= link_to "Back", :back %>



### app/views/users/registrations/new.html.erb ###
<h2>Sign up</h2>
<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :username %><br />
    <%= f.text_field :username %>
  </div>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

<div class="field">
    <%= f.label :password %>
    <% if @minimum_password_length %>
    <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :address %><br />
    <%= f.text_field :address %>
  </div>

  <div class="field">
    <%= f.label :province %><br />
    <%= f.collection_select :province_id, Province.all, :id, :name %>
  </div>

  <div class="actions">
    <%= f.submit "Sign up" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### app/views/users/sessions/new.html.erb ###
<h2>Log in</h2>

<%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="field">
    <%= f.label :password %><br />
    <%= f.password_field :password, autocomplete: "current-password" %>
  </div>

  <% if devise_mapping.rememberable? %>
    <div class="field">
      <%= f.check_box :remember_me %>
      <%= f.label :remember_me %>
    </div>
  <% end %>

  <div class="actions">
    <%= f.submit "Log in" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### app/views/users/shared/_error_messages.html.erb ###
<% if resource.errors.any? %>
  <div id="error_explanation" data-turbo-cache="false">
    <h2>
      <%= I18n.t("errors.messages.not_saved",
                 count: resource.errors.count,
                 resource: resource.class.model_name.human.downcase)
       %>
    </h2>
    <ul>
      <% resource.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>



### app/views/users/shared/_links.html.erb ###
<%- if controller_name != 'sessions' %>
  <%= link_to "Log in", new_session_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= button_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), data: { turbo: false } %><br />
  <% end %>
<% end %>



### app/views/users/unlocks/new.html.erb ###
<h2>Resend unlock instructions</h2>

<%= form_for(resource, as: resource_name, url: unlock_path(resource_name), html: { method: :post }) do |f| %>
  <%= render "users/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="actions">
    <%= f.submit "Resend unlock instructions" %>
  </div>
<% end %>

<%= render "users/shared/links" %>



### config/application.rb ###
require_relative "boot"

require "rails/all"

require "active_storage/engine"


# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module AmazoniaPetSupplies
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 7.1

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w(assets tasks))
    config.active_job.queue_adapter = :inline
    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")
  end
end



### config/boot.rb ###
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.



### config/cable.yml ###
development:
  adapter: async

test:
  adapter: test

production:
  adapter: redis
  url: <%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %>
  channel_prefix: amazonia_pet_supplies_production



### config/credentials.yml.enc ###
b4ipFJ/e6cLCHW5UloK8bkTOInsYASWbylQxfBdwt++bBznfGqQAsCue9HL0OnpcFBhIQOBeyZn0XnDNGmAImS7cRX91e7q2yizY/qbtTn6pDVHvVqPFEmNsEOii+7ta9zFXcL+A0oOIC/cpB4/g42cA0lPCCJkQIQUyRThvpWP4fqR39T6RisOcEHgXcCCUA6Zin3L0ZI5mF50qVyeiAhxYYjTRYd6wJy5J1fticg+etQlgcGYVyoepolbMCDAM3I90wj/fHxXkRfeuuVsCThaPfE4rtqrfoIXFcLZQbYO2ms1ohyOuU0aMz97D/wtoFXzCXsfdmYaV3QaET/tyg7yASIBJf78b2/rcOJKP+BHsCPwtvBuO72jfuYRQcZKIJyLR6F5DbyMRTibogwnAVDjgU85Z--DU1FPMAK3N2JFmPu--ZuhtpM8kjuwqv9ao9W/Flw==


### config/database.yml ###
# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 10000

development:
  <<: *default
  database: db/development.sqlite3
  pool: 5

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: storage/test.sqlite3

production:
  <<: *default
  database: storage/production.sqlite3



### config/environment.rb ###
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!



### config/environments/development.rb ###
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing
  config.server_timing = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = {
      "Cache-Control" => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local
  config.assets.compile = true
  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  config.action_mailer.perform_caching = false
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions
  config.action_controller.raise_on_missing_callback_actions = true
end



### config/environments/production.rb ###
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in ENV["RAILS_MASTER_KEY"], config/master.key, or an environment
  # key such as config/credentials/production.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Disable serving static files from `public/`, relying on NGINX/Apache to do so instead.
  # config.public_file_server.enabled = false

  # Compress CSS using a preprocessor.
  # config.assets.css_compressor = :sass

  # Do not fall back to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false
  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
  # config.action_dispatch.x_sendfile_header = "X-Accel-Redirect" # for NGINX

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Mount Action Cable outside main process or domain.
  # config.action_cable.mount_path = nil
  # config.action_cable.url = "wss://example.com/cable"
  # config.action_cable.allowed_request_origins = [ "http://example.com", /http:\/\/example.*/ ]

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  # Can be used together with config.force_ssl for Strict-Transport-Security and secure cookies.
  # config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Log to STDOUT by default
  config.logger = ActiveSupport::Logger.new(STDOUT)
    .tap  { |logger| logger.formatter = ::Logger::Formatter.new }
    .then { |logger| ActiveSupport::TaggedLogging.new(logger) }

  # Prepend all log lines with the following tags.
  config.log_tags = [ :request_id ]

  # "info" includes generic and useful information about system operation, but avoids logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII). If you
  # want to log everything, set the level to "debug".
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store

  # Use a real queuing backend for Active Job (and separate queues per environment).
  # config.active_job.queue_adapter = :resque
  # config.active_job.queue_name_prefix = "amazonia_pet_supplies_production"

  config.action_mailer.perform_caching = false

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end



### config/environments/test.rb ###
require "active_support/core_ext/integer/time"

# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with Cache-Control for performance.
  config.public_file_server.enabled = true
  config.public_file_server.headers = {
    "Cache-Control" => "public, max-age=#{1.hour.to_i}"
  }

  # Show full error reports and disable caching.
  config.consider_all_requests_local = true
  config.action_controller.perform_caching = false
  config.cache_store = :null_store

  # Render exception templates for rescuable exceptions and raise for other exceptions.
  config.action_dispatch.show_exceptions = :rescuable

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  config.action_mailer.perform_caching = false

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions
  config.action_controller.raise_on_missing_callback_actions = true
end



### config/importmap.rb ###
# Pin npm packages by running ./bin/importmap

pin "application"
pin "@hotwired/turbo-rails", to: "turbo.min.js"
pin "@hotwired/stimulus", to: "stimulus.min.js"
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js"
pin_all_from "app/javascript/controllers", under: "controllers"
pin "@rails/ujs", to: "rails-ujs.js"


### config/initializers/active_admin.rb ###
ActiveAdmin.setup do |config|
  # == Site Title
  #
  # Set the title that is displayed on the main layout
  # for each of the active admin pages.
  #
  config.site_title = "Amazonia Pet Supplies"

  # Set the link url for the title. For example, to take
  # users to your main site. Defaults to no link.
  #
  # config.site_title_link = "/"

  # Set an optional image to be displayed for the header
  # instead of a string (overrides :site_title)
  #
  # Note: Aim for an image that's 21px high so it fits in the header.
  #
  # config.site_title_image = "logo.png"

  # == Load Paths
  #
  # By default Active Admin files go inside app/admin/.
  # You can change this directory.
  #
  # eg:
  #   config.load_paths = [File.join(Rails.root, 'app', 'ui')]
  #
  # Or, you can also load more directories.
  # Useful when setting namespaces with users that are not your main AdminUser entity.
  #
  # eg:
  #   config.load_paths = [
  #     File.join(Rails.root, 'app', 'admin'),
  #     File.join(Rails.root, 'app', 'cashier')
  #   ]

  # == Default Namespace
  #
  # Set the default namespace each administration resource
  # will be added to.
  #
  # eg:
  #   config.default_namespace = :hello_world
  #
  # This will create resources in the HelloWorld module and
  # will namespace routes to /hello_world/*
  #
  # To set no namespace by default, use:
  #   config.default_namespace = false
  #
  # Default:
  # config.default_namespace = :admin
  #
  # You can customize the settings for each namespace by using
  # a namespace block. For example, to change the site title
  # within a namespace:
  #
  #   config.namespace :admin do |admin|
  #     admin.site_title = "Custom Admin Title"
  #   end
  #
  # This will ONLY change the title for the admin section. Other
  # namespaces will continue to use the main "site_title" configuration.

  # == User Authentication
  #
  # Active Admin will automatically call an authentication
  # method in a before filter of all controller actions to
  # ensure that there is a currently logged in admin user.
  #
  # This setting changes the method which Active Admin calls
  # within the application controller.
  config.authentication_method = :authenticate_admin_user!

  # == User Authorization
  #
  # Active Admin will automatically call an authorization
  # method in a before filter of all controller actions to
  # ensure that there is a user with proper rights. You can use
  # CanCanAdapter or make your own. Please refer to documentation.
  # config.authorization_adapter = ActiveAdmin::CanCanAdapter

  # In case you prefer Pundit over other solutions you can here pass
  # the name of default policy class. This policy will be used in every
  # case when Pundit is unable to find suitable policy.
  # config.pundit_default_policy = "MyDefaultPunditPolicy"

  # If you wish to maintain a separate set of Pundit policies for admin
  # resources, you may set a namespace here that Pundit will search
  # within when looking for a resource's policy.
  # config.pundit_policy_namespace = :admin

  # You can customize your CanCan Ability class name here.
  # config.cancan_ability_class = "Ability"

  # You can specify a method to be called on unauthorized access.
  # This is necessary in order to prevent a redirect loop which happens
  # because, by default, user gets redirected to Dashboard. If user
  # doesn't have access to Dashboard, he'll end up in a redirect loop.
  # Method provided here should be defined in application_controller.rb.
  # config.on_unauthorized_access = :access_denied

  # == Current User
  #
  # Active Admin will associate actions with the current
  # user performing them.
  #
  # This setting changes the method which Active Admin calls
  # (within the application controller) to return the currently logged in user.
  config.current_user_method = :current_admin_user

  # == Logging Out
  #
  # Active Admin displays a logout link on each screen. These
  # settings configure the location and method used for the link.
  #
  # This setting changes the path where the link points to. If it's
  # a string, the strings is used as the path. If it's a Symbol, we
  # will call the method to return the path.
  #
  # Default:
  config.logout_link_path = :custom_destroy_admin_user_session_path
  config.logout_link_method = :delete
  # This setting changes the http method used when rendering the
  # link. For example :get, :delete, :put, etc..
  #


  # == Root
  #
  # Set the action to call for the root path. You can set different
  # roots for each namespace.
  #
  # Default:
  # config.root_to = 'dashboard#index'

  # == Admin Comments
  #
  # This allows your users to comment on any resource registered with Active Admin.
  #
  # You can completely disable comments:
  # config.comments = false
  #
  # You can change the name under which comments are registered:
  # config.comments_registration_name = 'AdminComment'
  #
  # You can change the order for the comments and you can change the column
  # to be used for ordering:
  # config.comments_order = 'created_at ASC'
  #
  # You can disable the menu item for the comments index page:
  # config.comments_menu = false
  #
  # You can customize the comment menu:
  # config.comments_menu = { parent: 'Admin', priority: 1 }

  # == Batch Actions
  #
  # Enable and disable Batch Actions
  #
  config.batch_actions = true

  # == Controller Filters
  #
  # You can add before, after and around filters to all of your
  # Active Admin resources and pages from here.
  #
  # config.before_action :do_something_awesome

  # == Attribute Filters
  #
  # You can exclude possibly sensitive model attributes from being displayed,
  # added to forms, or exported by default by ActiveAdmin
  #
  config.filter_attributes = [:encrypted_password, :password, :password_confirmation]

  # == Localize Date/Time Format
  #
  # Set the localize format to display dates and times.
  # To understand how to localize your app with I18n, read more at
  # https://guides.rubyonrails.org/i18n.html
  #
  # You can run `bin/rails runner 'puts I18n.t("date.formats")'` to see the
  # available formats in your application.
  #
  config.localize_format = :long

  # == Setting a Favicon
  #
  # config.favicon = 'favicon.ico'

  # == Meta Tags
  #
  # Add additional meta tags to the head element of active admin pages.
  #
  # Add tags to all pages logged in users see:
  #   config.meta_tags = { author: 'My Company' }

  # By default, sign up/sign in/recover password pages are excluded
  # from showing up in search engine results by adding a robots meta
  # tag. You can reset the hash of meta tags included in logged out
  # pages:
  #   config.meta_tags_for_logged_out_pages = {}

  # == Removing Breadcrumbs
  #
  # Breadcrumbs are enabled by default. You can customize them for individual
  # resources or you can disable them globally from here.
  #
  # config.breadcrumb = false

  # == Create Another Checkbox
  #
  # Create another checkbox is disabled by default. You can customize it for individual
  # resources or you can enable them globally from here.
  #
  # config.create_another = true

  # == Register Stylesheets & Javascripts
  #
  # We recommend using the built in Active Admin layout and loading
  # up your own stylesheets / javascripts to customize the look
  # and feel.
  config.view_factory.layout = 'layouts/active_admin'
  # To load a stylesheet:
  #   config.register_stylesheet 'my_stylesheet.css'
  #
  # You can provide an options hash for more control, which is passed along to stylesheet_link_tag():
  #   config.register_stylesheet 'my_print_stylesheet.css', media: :print
  #
  # To load a javascript file:
  #   config.register_javascript 'my_javascript.js'

  # == CSV options
  #
  # Set the CSV builder separator
  # config.csv_options = { col_sep: ';' }
  #
  # Force the use of quotes
  # config.csv_options = { force_quotes: true }

  # == Menu System
  #
  # You can add a navigation menu to be used in your application, or configure a provided menu
  #
  # To change the default utility navigation to show a link to your website & a logout btn
  #
  #   config.namespace :admin do |admin|
  #     admin.build_menu :utility_navigation do |menu|
  #       menu.add label: "My Great Website", url: "http://www.mygreatwebsite.com", html_options: { target: :blank }
  #       admin.add_logout_button_to_menu menu
  #     end
  #   end
  #
  # If you wanted to add a static menu item to the default menu provided:
  #
  #   config.namespace :admin do |admin|
  #     admin.build_menu :default do |menu|
  #       menu.add label: "My Great Website", url: "http://www.mygreatwebsite.com", html_options: { target: "_blank" }
  #     end
  #   end

  # == Download Links
  #
  # You can disable download links on resource listing pages,
  # or customize the formats shown per namespace/globally
  #
  # To disable/customize for the :admin namespace:
  #
  #   config.namespace :admin do |admin|
  #
  #     # Disable the links entirely
  #     admin.download_links = false
  #
  #     # Only show XML & PDF options
  #     admin.download_links = [:xml, :pdf]
  #
  #     # Enable/disable the links based on block
  #     #   (for example, with cancan)
  #     admin.download_links = proc { can?(:view_download_links) }
  #
  #   end

  # == Pagination
  #
  # Pagination is enabled by default for all resources.
  # You can control the default per page count for all resources here.
  #
  # config.default_per_page = 30
  #
  # You can control the max per page count too.
  #
  # config.max_per_page = 10_000

  # == Filters
  #
  # By default the index screen includes a "Filters" sidebar on the right
  # hand side with a filter for each attribute of the registered model.
  # You can enable or disable them for all resources here.
  #
  # config.filters = true
  #
  # By default the filters include associations in a select, which means
  # that every record will be loaded for each association (up
  # to the value of config.maximum_association_filter_arity).
  # You can enabled or disable the inclusion
  # of those filters by default here.
  #
  # config.include_default_association_filters = true

  # config.maximum_association_filter_arity = 256 # default value of :unlimited will change to 256 in a future version
  # config.filter_columns_for_large_association = [
  #    :display_name,
  #    :full_name,
  #    :name,
  #    :username,
  #    :login,
  #    :title,
  #    :email,
  #  ]
  # config.filter_method_for_large_association = '_start'

  # == Head
  #
  # You can add your own content to the site head like analytics. Make sure
  # you only pass content you trust.
  #
  # config.head = ''.html_safe

  # == Footer
  #
  # By default, the footer shows the current Active Admin version. You can
  # override the content of the footer here.
  #
  # config.footer = 'my custom footer text'

  # == Sorting
  #
  # By default ActiveAdmin::OrderClause is used for sorting logic
  # You can inherit it with own class and inject it for all resources
  #
  # config.order_clause = MyOrderClause

  # == Webpacker
  #
  # By default, Active Admin uses Sprocket's asset pipeline.
  # You can switch to using Webpacker here.
  #
  # config.use_webpacker = true
end



### config/initializers/assets.rb ###
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"

# Add additional assets to the asset load path.
# Rails.application.config.assets.paths << Emoji.images_path

# Precompile additional assets.
# application.js, application.css, and all non-JS/CSS in the app/assets
# folder are already added.
# Rails.application.config.assets.precompile += %w( admin.js admin.css )
Rails.application.config.assets.precompile += %w( activeadmin/quill_editor/quill_editor.js )
Rails.application.config.assets.paths << Rails.root.join('node_modules')
Rails.application.config.assets.paths << Rails.root.join('app/assets/javascripts')
Rails.application.config.assets.paths << Rails.root.join('app/assets/stylesheets')


### config/initializers/content_security_policy.rb ###
# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap, inline scripts, and inline styles.
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src style-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end



### config/initializers/devise.rb ###
# frozen_string_literal: true

# Assuming you have not yet modified this file, each configuration option below
# is set to its default value. Note that some are commented out while others
# are not: uncommented lines are intended to protect your configuration from
# breaking changes in upgrades (i.e., in the event that future versions of
# Devise change the default values for those options).
#
# Use this hook to configure devise mailer, warden hooks and so forth.
# Many of these configuration options can be set straight in your model.
Devise.setup do |config|
  # The secret key used by Devise. Devise uses this key to generate
  # random tokens. Changing this key will render invalid all existing
  # confirmation, reset password and unlock tokens in the database.
  # Devise will use the `secret_key_base` as its `secret_key`
  # by default. You can change it below and use your own secret key.
  # config.secret_key = 'c978d5ef2a6056e1ec5e68424080fb0d52c8aeb1e35bdc172f2c9495970490c88b7a38bfdec96f1d4a45459c7337fa060353d13a5aa2980afe0fb1b9afcaa3cd'

  # ==> Controller configuration
  # Configure the parent class to the devise controllers.
  # config.parent_controller = 'DeviseController'

  # ==> Mailer Configuration
  # Configure the e-mail address which will be shown in Devise::Mailer,
  # note that it will be overwritten if you use your own mailer class
  # with default "from" parameter.
  config.mailer_sender = 'please-change-me-at-config-initializers-devise@example.com'

  # Configure the class responsible to send e-mails.
  # config.mailer = 'Devise::Mailer'

  # Configure the parent class responsible to send e-mails.
  # config.parent_mailer = 'ActionMailer::Base'

  # ==> ORM configuration
  # Load and configure the ORM. Supports :active_record (default) and
  # :mongoid (bson_ext recommended) by default. Other ORMs may be
  # available as additional gems.
  require 'devise/orm/active_record'

  # ==> Configuration for any authentication mechanism
  # Configure which keys are used when authenticating a user. The default is
  # just :email. You can configure it to use [:username, :subdomain], so for
  # authenticating a user, both parameters are required. Remember that those
  # parameters are used only when authenticating and not when retrieving from
  # session. If you need permissions, you should implement that in a before filter.
  # You can also supply a hash where the value is a boolean determining whether
  # or not authentication should be aborted when the value is not present.
  # config.authentication_keys = [:email]

  # Configure parameters from the request object used for authentication. Each entry
  # given should be a request method and it will automatically be passed to the
  # find_for_authentication method and considered in your model lookup. For instance,
  # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.
  # The same considerations mentioned for authentication_keys also apply to request_keys.
  # config.request_keys = []

  # Configure which authentication keys should be case-insensitive.
  # These keys will be downcased upon creating or modifying a user and when used
  # to authenticate or find a user. Default is :email.
  config.case_insensitive_keys = [:email]

  # Configure which authentication keys should have whitespace stripped.
  # These keys will have whitespace before and after removed upon creating or
  # modifying a user and when used to authenticate or find a user. Default is :email.
  config.strip_whitespace_keys = [:email]

  # Tell if authentication through request.params is enabled. True by default.
  # It can be set to an array that will enable params authentication only for the
  # given strategies, for example, `config.params_authenticatable = [:database]` will
  # enable it only for database (email + password) authentication.
  # config.params_authenticatable = true

  # Tell if authentication through HTTP Auth is enabled. False by default.
  # It can be set to an array that will enable http authentication only for the
  # given strategies, for example, `config.http_authenticatable = [:database]` will
  # enable it only for database authentication.
  # For API-only applications to support authentication "out-of-the-box", you will likely want to
  # enable this with :database unless you are using a custom strategy.
  # The supported strategies are:
  # :database      = Support basic authentication with authentication key + password
  # config.http_authenticatable = false

  # If 401 status code should be returned for AJAX requests. True by default.
  # config.http_authenticatable_on_xhr = true

  # The realm used in Http Basic Authentication. 'Application' by default.
  # config.http_authentication_realm = 'Application'

  # It will change confirmation, password recovery and other workflows
  # to behave the same regardless if the e-mail provided was right or wrong.
  # Does not affect registerable.
  # config.paranoid = true

  # By default Devise will store the user in session. You can skip storage for
  # particular strategies by setting this option.
  # Notice that if you are skipping storage for all authentication paths, you
  # may want to disable generating routes to Devise's sessions controller by
  # passing skip: :sessions to `devise_for` in your config/routes.rb
  config.skip_session_storage = [:http_auth]

  # By default, Devise cleans up the CSRF token on authentication to
  # avoid CSRF token fixation attacks. This means that, when using AJAX
  # requests for sign in and sign up, you need to get a new CSRF token
  # from the server. You can disable this option at your own risk.
  # config.clean_up_csrf_token_on_authentication = true

  # When false, Devise will not attempt to reload routes on eager load.
  # This can reduce the time taken to boot the app but if your application
  # requires the Devise mappings to be loaded during boot time the application
  # won't boot properly.
  # config.reload_routes = true

  # ==> Configuration for :database_authenticatable
  # For bcrypt, this is the cost for hashing the password and defaults to 12. If
  # using other algorithms, it sets how many times you want the password to be hashed.
  # The number of stretches used for generating the hashed password are stored
  # with the hashed password. This allows you to change the stretches without
  # invalidating existing passwords.
  #
  # Limiting the stretches to just one in testing will increase the performance of
  # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use
  # a value less than 10 in other environments. Note that, for bcrypt (the default
  # algorithm), the cost increases exponentially with the number of stretches (e.g.
  # a value of 20 is already extremely slow: approx. 60 seconds for 1 calculation).
  config.stretches = Rails.env.test? ? 1 : 12

  # Set up a pepper to generate the hashed password.
  # config.pepper = 'ba37932508d2f96fb0088739e9bb767208dcd173161207a194aa6e4630ca14f0af7797a0e4d7561a7b27a7474367a2c7a9644bfc916c4fe73926b2fa7a31b52d'

  # Send a notification to the original email when the user's email is changed.
  # config.send_email_changed_notification = false

  # Send a notification email when the user's password is changed.
  # config.send_password_change_notification = false

  # ==> Configuration for :confirmable
  # A period that the user is allowed to access the website even without
  # confirming their account. For instance, if set to 2.days, the user will be
  # able to access the website for two days without confirming their account,
  # access will be blocked just in the third day.
  # You can also set it to nil, which will allow the user to access the website
  # without confirming their account.
  # Default is 0.days, meaning the user cannot access the website without
  # confirming their account.
  # config.allow_unconfirmed_access_for = 2.days

  # A period that the user is allowed to confirm their account before their
  # token becomes invalid. For example, if set to 3.days, the user can confirm
  # their account within 3 days after the mail was sent, but on the fourth day
  # their account can't be confirmed with the token any more.
  # Default is nil, meaning there is no restriction on how long a user can take
  # before confirming their account.
  # config.confirm_within = 3.days

  # If true, requires any email changes to be confirmed (exactly the same way as
  # initial account confirmation) to be applied. Requires additional unconfirmed_email
  # db field (see migrations). Until confirmed, new email is stored in
  # unconfirmed_email column, and copied to email column on successful confirmation.
  config.reconfirmable = true

  # Defines which key will be used when confirming an account
  # config.confirmation_keys = [:email]

  # ==> Configuration for :rememberable
  # The time the user will be remembered without asking for credentials again.
  # config.remember_for = 2.weeks

  # Invalidates all the remember me tokens when the user signs out.
  config.expire_all_remember_me_on_sign_out = true

  # If true, extends the user's remember period when remembered via cookie.
  # config.extend_remember_period = false

  # Options to be passed to the created cookie. For instance, you can set
  # secure: true in order to force SSL only cookies.
  # config.rememberable_options = {}

  # ==> Configuration for :validatable
  # Range for password length.
  config.password_length = 6..128

  # Email regex used to validate email formats. It simply asserts that
  # one (and only one) @ exists in the given string. This is mainly
  # to give user feedback and not to assert the e-mail validity.
  config.email_regexp = /\A[^@\s]+@[^@\s]+\z/

  # ==> Configuration for :timeoutable
  # The time you want to timeout the user session without activity. After this
  # time the user will be asked for credentials again. Default is 30 minutes.
  # config.timeout_in = 30.minutes

  # ==> Configuration for :lockable
  # Defines which strategy will be used to lock an account.
  # :failed_attempts = Locks an account after a number of failed attempts to sign in.
  # :none            = No lock strategy. You should handle locking by yourself.
  # config.lock_strategy = :failed_attempts

  # Defines which key will be used when locking and unlocking an account
  # config.unlock_keys = [:email]

  # Defines which strategy will be used to unlock an account.
  # :email = Sends an unlock link to the user email
  # :time  = Re-enables login after a certain amount of time (see :unlock_in below)
  # :both  = Enables both strategies
  # :none  = No unlock strategy. You should handle unlocking by yourself.
  # config.unlock_strategy = :both

  # Number of authentication tries before locking an account if lock_strategy
  # is failed attempts.
  # config.maximum_attempts = 20

  # Time interval to unlock the account if :time is enabled as unlock_strategy.
  # config.unlock_in = 1.hour

  # Warn on the last attempt before the account is locked.
  # config.last_attempt_warning = true

  # ==> Configuration for :recoverable
  #
  # Defines which key will be used when recovering the password for an account
  # config.reset_password_keys = [:email]

  # Time interval you can reset your password with a reset password key.
  # Don't put a too small interval or your users won't have the time to
  # change their passwords.
  config.reset_password_within = 6.hours

  # When set to false, does not sign a user in automatically after their password is
  # reset. Defaults to true, so a user is signed in automatically after a reset.
  # config.sign_in_after_reset_password = true

  # ==> Configuration for :encryptable
  # Allow you to use another hashing or encryption algorithm besides bcrypt (default).
  # You can use :sha1, :sha512 or algorithms from others authentication tools as
  # :clearance_sha1, :authlogic_sha512 (then you should set stretches above to 20
  # for default behavior) and :restful_authentication_sha1 (then you should set
  # stretches to 10, and copy REST_AUTH_SITE_KEY to pepper).
  #
  # Require the `devise-encryptable` gem when using anything other than bcrypt
  # config.encryptor = :sha512

  # ==> Scopes configuration
  # Turn scoped views on. Before rendering "sessions/new", it will first check for
  # "users/sessions/new". It's turned off by default because it's slower if you
  # are using only default views.
  # config.scoped_views = false

  # Configure the default scope given to Warden. By default it's the first
  # devise role declared in your routes (usually :user).
  # config.default_scope = :user

  # Set this configuration to false if you want /users/sign_out to sign out
  # only the current scope. By default, Devise signs out all scopes.
  # config.sign_out_all_scopes = true

  # ==> Navigation configuration
  # Lists the formats that should be treated as navigational. Formats like
  # :html should redirect to the sign in page when the user does not have
  # access, but formats like :xml or :json, should return 401.
  #
  # If you have any extra navigational formats, like :iphone or :mobile, you
  # should add them to the navigational formats lists.
  #
  # The "*/*" below is required to match Internet Explorer requests.
  config.navigational_formats = ['*/*', :html, :turbo_stream]

  # The default HTTP method used to sign out a resource. Default is :delete.
  config.sign_out_via = :delete

  # ==> OmniAuth
  # Add a new OmniAuth provider. Check the wiki for more information on setting
  # up on your models and hooks.
  # config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'

  # ==> Warden configuration
  # If you want to use other strategies, that are not supported by Devise, or
  # change the failure app, you can configure them inside the config.warden block.
  #
  # config.warden do |manager|
  #   manager.intercept_401 = false
  #   manager.default_strategies(scope: :user).unshift :some_external_strategy
  # end

  # ==> Mountable engine configurations
  # When using Devise inside an engine, let's call it `MyEngine`, and this engine
  # is mountable, there are some extra configurations to be taken into account.
  # The following options are available, assuming the engine is mounted as:
  #
  #     mount MyEngine, at: '/my_engine'
  #
  # The router that invoked `devise_for`, in the example above, would be:
  # config.router_name = :my_engine
  #
  # When using OmniAuth, Devise cannot automatically set OmniAuth path,
  # so you need to do it manually. For the users scope, it would be:
  # config.omniauth_path_prefix = '/my_engine/users/auth'

  # ==> Hotwire/Turbo configuration
  # When using Devise with Hotwire/Turbo, the http status for error responses
  # and some redirects must match the following. The default in Devise for existing
  # apps is `200 OK` and `302 Found` respectively, but new apps are generated with
  # these new defaults that match Hotwire/Turbo behavior.
  # Note: These might become the new default in future versions of Devise.
  config.responder.error_status = :unprocessable_entity
  config.responder.redirect_status = :see_other

  # ==> Configuration for :registerable

  # When set to false, does not sign a user in automatically after their password is
  # changed. Defaults to true, so a user is signed in automatically after changing a password.
  # config.sign_in_after_change_password = true
end



### config/initializers/filter_parameter_logging.rb ###
# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn
]



### config/initializers/inflections.rb ###
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end



### config/initializers/permissions_policy.rb ###
# Be sure to restart your server when you modify this file.

# Define an application-wide HTTP permissions policy. For further
# information see: https://developers.google.com/web/updates/2018/06/feature-policy

# Rails.application.config.permissions_policy do |policy|
#   policy.camera      :none
#   policy.gyroscope   :none
#   policy.microphone  :none
#   policy.usb         :none
#   policy.fullscreen  :self
#   policy.payment     :self, "https://secure.example.com"
# end



### config/initializers/ransack_active_storage.rb ###
# config/initializers/ransack_active_storage.rb
Rails.application.config.to_prepare do
  ActiveStorage::Attachment.class_eval do
    def self.ransackable_attributes(auth_object = nil)
      ["blob_id", "created_at", "id", "name", "record_id", "record_type"]
    end
  end
end



### config/initializers/stripe.rb ###
# config/initializers/stripe.rb
Rails.configuration.stripe = {
  publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
  secret_key: ENV['STRIPE_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]



### config/locales/devise.en.yml ###
# Additional translations at https://github.com/heartcombo/devise/wiki/I18n

en:
  devise:
    confirmations:
      confirmed: "Your email address has been successfully confirmed."
      send_instructions: "You will receive an email with instructions for how to confirm your email address in a few minutes."
      send_paranoid_instructions: "If your email address exists in our database, you will receive an email with instructions for how to confirm your email address in a few minutes."
    failure:
      already_authenticated: "You are already signed in."
      inactive: "Your account is not activated yet."
      invalid: "Invalid %{authentication_keys} or password."
      locked: "Your account is locked."
      last_attempt: "You have one more attempt before your account is locked."
      not_found_in_database: "Invalid %{authentication_keys} or password."
      timeout: "Your session expired. Please sign in again to continue."
      unauthenticated: "You need to sign in or sign up before continuing."
      unconfirmed: "You have to confirm your email address before continuing."
    mailer:
      confirmation_instructions:
        subject: "Confirmation instructions"
      reset_password_instructions:
        subject: "Reset password instructions"
      unlock_instructions:
        subject: "Unlock instructions"
      email_changed:
        subject: "Email Changed"
      password_change:
        subject: "Password Changed"
    omniauth_callbacks:
      failure: "Could not authenticate you from %{kind} because \"%{reason}\"."
      success: "Successfully authenticated from %{kind} account."
    passwords:
      no_token: "You can't access this page without coming from a password reset email. If you do come from a password reset email, please make sure you used the full URL provided."
      send_instructions: "You will receive an email with instructions on how to reset your password in a few minutes."
      send_paranoid_instructions: "If your email address exists in our database, you will receive a password recovery link at your email address in a few minutes."
      updated: "Your password has been changed successfully. You are now signed in."
      updated_not_active: "Your password has been changed successfully."
    registrations:
      destroyed: "Bye! Your account has been successfully cancelled. We hope to see you again soon."
      signed_up: "Welcome! You have signed up successfully."
      signed_up_but_inactive: "You have signed up successfully. However, we could not sign you in because your account is not yet activated."
      signed_up_but_locked: "You have signed up successfully. However, we could not sign you in because your account is locked."
      signed_up_but_unconfirmed: "A message with a confirmation link has been sent to your email address. Please follow the link to activate your account."
      update_needs_confirmation: "You updated your account successfully, but we need to verify your new email address. Please check your email and follow the confirmation link to confirm your new email address."
      updated: "Your account has been updated successfully."
      updated_but_not_signed_in: "Your account has been updated successfully, but since your password was changed, you need to sign in again."
    sessions:
      signed_in: "Signed in successfully."
      signed_out: "Signed out successfully."
      already_signed_out: "Signed out successfully."
    unlocks:
      send_instructions: "You will receive an email with instructions for how to unlock your account in a few minutes."
      send_paranoid_instructions: "If your account exists, you will receive an email with instructions for how to unlock it in a few minutes."
      unlocked: "Your account has been unlocked successfully. Please sign in to continue."
  errors:
    messages:
      already_confirmed: "was already confirmed, please try signing in"
      confirmation_period_expired: "needs to be confirmed within %{period}, please request a new one"
      expired: "has expired, please request a new one"
      not_found: "not found"
      not_locked: "was not locked"
      not_saved:
        one: "1 error prohibited this %{resource} from being saved:"
        other: "%{count} errors prohibited this %{resource} from being saved:"



### config/locales/en.yml ###
# Files in the config/locales directory are used for internationalization and
# are automatically loaded by Rails. If you want to use locales other than
# English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more about the API, please read the Rails Internationalization guide
# at https://guides.rubyonrails.org/i18n.html.
#
# Be aware that YAML interprets the following case-insensitive strings as
# booleans: `true`, `false`, `on`, `off`, `yes`, `no`. Therefore, these strings
# must be quoted to be interpreted as strings. For example:
#
#     en:
#       "yes": yup
#       enabled: "ON"

en:
  hello: "Hello world"
  activerecord:
    attributes:
      user:
        postal_code: "ZIP Code"



### config/master.key ###
ef706cb99cf2714ec524fd04dc6284fc


### config/puma.rb ###
# This configuration file will be evaluated by Puma. The top-level methods that
# are invoked here are part of Puma's configuration DSL. For more information
# about methods provided by the DSL, see https://puma.io/puma/Puma/DSL.html.

# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Any libraries that use thread pools should be configured to match
# the maximum value specified for Puma. Default is set to 5 threads for minimum
# and maximum; this matches the default thread size of Active Record.
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies that the worker count should equal the number of processors in production.
if ENV["RAILS_ENV"] == "production"
  require "concurrent-ruby"
  worker_count = Integer(ENV.fetch("WEB_CONCURRENCY") { Concurrent.physical_processor_count })
  workers worker_count if worker_count > 1
end

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
port ENV.fetch("PORT") { 3000 }

# Specifies the `environment` that Puma will run in.
environment ENV.fetch("RAILS_ENV") { "development" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart



### config/routes/active_storage.rb ###
# config/routes/active_storage.rb
Rails.application.routes.draw do
  direct :rails_storage_proxy do |model, options|
    route_for(:rails_storage_proxy, model.signed_id, model.filename, options)
  end

  direct :rails_storage_redirect do |model, options|
    route_for(:rails_storage_redirect, model.signed_id, model.filename, options)
  end

  scope Rails.configuration.active_storage.routes_prefix do
    get  "/blobs/redirect/:signed_id/*filename" => "active_storage/blobs#show", as: :rails_storage_redirect
    get  "/blobs/:signed_id/*filename" => "active_storage/blobs#show", as: :rails_storage_proxy
    get  "/representations/redirect/:signed_blob_id/:variation_key/*filename" => "active_storage/representations#show", as: :rails_blob_representation_redirect
    get  "/representations/:signed_blob_id/:variation_key/*filename" => "active_storage/representations#show", as: :rails_blob_representation_proxy
    get  "/disk/:encoded_key/*filename" => "active_storage/disk#show", as: :rails_disk_service
    put  "/disk/:encoded_token" => "active_storage/disk#update", as: :update_rails_disk_service
    post "/direct_uploads" => "active_storage/direct_uploads#create", as: :rails_direct_uploads
  end
end



### config/routes.rb ###
Rails.application.routes.draw do
  # Define Devise routes for admin users with custom paths
  devise_for :admin_users, path: 'admin', controllers: {
    sessions: 'admin_users/sessions',
    registrations: 'admin_users/registrations',
    passwords: 'admin_users/passwords'
  }, path_names: {
    sign_in: 'login',
    sign_out: 'logout',
    password: 'secret',
    confirmation: 'verification',
    unlock: 'unblock',
    registration: 'register',
    sign_up: 'cmon_let_me_in'
  }
  devise_scope :admin_user do
    get 'admin/logout', to: 'admin_users/sessions#destroy', as: :custom_destroy_admin_user_session
  end

  namespace :admin do
    get 'dashboard', to: 'dashboard#index'
  end

  # ActiveAdmin routes
  ActiveAdmin.routes(self)

  # Devise routes for regular users with custom paths
  devise_for :users, controllers: {
    sessions: 'users/sessions',
    registrations: 'users/registrations',
    passwords: 'users/passwords'
  }, path_names: {
    sign_in: 'login',
    sign_out: 'logout',
    password: 'secret',
    confirmation: 'verification',
    unlock: 'unblock',
    registration: 'register',
    sign_up: 'cmon_let_me_in'
  }

  devise_scope :user do
    get 'users/logout', to: 'users/sessions#destroy', as: :custom_destroy_user_session
  end

  # Cart and Orders routes
  resource :cart, only: [:show], controller: 'cart' do
    post 'add/:id', to: 'cart#add', as: 'add_to'
    patch 'update/:id', to: 'cart#update', as: 'update'
    delete 'remove/:id', to: 'cart#remove', as: 'remove_from'
  end

  resources :orders, only: [:index, :new, :create, :show] do
    post 'recalculate_total', on: :collection
    member do
      patch 'confirm_payment'
    end
    resources :payments, only: [:new, :create] do
      post 'confirm', on: :collection
    end
  end


  resources :products, only: [:index, :show]
  resources :pages, only: [:show]
  resources :categories, only: [:show]

  # Ensure these routes use the correct page slugs or ids
  get '/contact', to: 'pages#show', defaults: { id: Page.find_by(title: 'Contact')&.id || -1 }
  get '/about', to: 'pages#show', defaults: { id: Page.find_by(title: 'About')&.id || -1 }

  require 'active_storage/engine'
  ActiveStorage::Engine.routes.draw do
    get  "/blobs/redirect/:signed_id/*filename" => "active_storage/blobs#show", as: :rails_storage_redirect
    get  "/blobs/:signed_id/*filename" => "active_storage/blobs#show", as: :rails_storage_proxy
    get  "/representations/redirect/:signed_blob_id/:variation_key/*filename" => "active_storage/representations#show", as: :rails_blob_representation_redirect
    get  "/representations/:signed_blob_id/:variation_key/*filename" => "active_storage/representations#show", as: :rails_blob_representation_proxy
    get  "/disk/:encoded_key/*filename" => "active_storage/disk#show", as: :rails_disk_service
    put  "/disk/:encoded_token" => "active_storage/disk#update", as: :update_rails_disk_service
    post "/direct_uploads" => "active_storage/direct_uploads#create", as: :rails_direct_uploads
  end
  # Define the root path route ("/")
  root to: "home#index"
  get 'search', to: 'home#search'


end



### config/storage.yml ###
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>
# For AWS, GCS, etc., configure accordingly

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket-<%= Rails.env %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]



### db/migrate/20240717171309_devise_create_users.rb ###
# frozen_string_literal: true

class DeviseCreateUsers < ActiveRecord::Migration[7.1]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      # t.integer  :sign_in_count, default: 0, null: false
      # t.datetime :current_sign_in_at
      # t.datetime :last_sign_in_at
      # t.string   :current_sign_in_ip
      # t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      # t.datetime :locked_at


      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end



### db/migrate/20240717171400_devise_create_admin_users.rb ###
# db/migrate/20240717171400_devise_create_admin_users.rb
class DeviseCreateAdminUsers < ActiveRecord::Migration[7.1]
  def change
    create_table :admin_users do |t|
      ## Database authenticatable
      t.string :email, null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Recoverable
      t.string :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string :current_sign_in_ip
      t.string :last_sign_in_ip

      t.timestamps null: false
    end

    add_index :admin_users, :email, unique: true
    add_index :admin_users, :reset_password_token, unique: true
  end
end



### db/migrate/20240717171415_create_active_admin_comments.rb ###
class CreateActiveAdminComments < ActiveRecord::Migration[7.1]
  def self.up
    create_table :active_admin_comments do |t|
      t.string :namespace
      t.text   :body
      t.references :resource, polymorphic: true
      t.references :author, polymorphic: true
      t.timestamps
    end
    add_index :active_admin_comments, [:namespace]
  end

  def self.down
    drop_table :active_admin_comments
  end
end



### db/migrate/20240717171620_create_products.rb ###
class CreateProducts < ActiveRecord::Migration[7.1]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description
      t.decimal :price
      t.integer :stock_quantity

      t.timestamps
    end
  end
end



### db/migrate/20240717171726_create_provinces.rb ###
class CreateProvinces < ActiveRecord::Migration[7.1]
  def change
    create_table :provinces do |t|
      t.string :name
      t.decimal :gst
      t.decimal :pst
      t.decimal :hst

      t.timestamps
    end
  end
end



### db/migrate/20240717171750_create_orders.rb ###
class CreateOrders < ActiveRecord::Migration[7.1]
  def change
    create_table :orders do |t|
      t.references :user, null: false, foreign_key: true
      t.decimal :total_amount
      t.string :status

      t.timestamps
    end
  end
end



### db/migrate/20240717171805_create_order_items.rb ###
class CreateOrderItems < ActiveRecord::Migration[7.1]
  def change
    create_table :order_items do |t|
      t.references :order, null: false, foreign_key: true
      t.references :product, null: false, foreign_key: true
      t.integer :quantity
      t.decimal :price

      t.timestamps
    end
  end
end



### db/migrate/20240717171819_create_categories.rb ###
class CreateCategories < ActiveRecord::Migration[7.1]
  def change
    create_table :categories do |t|
      t.string :name

      t.timestamps
    end
  end
end



### db/migrate/20240717171834_create_product_categories.rb ###
class CreateProductCategories < ActiveRecord::Migration[7.1]
  def change
    create_table :product_categories do |t|
      t.references :product, null: false, foreign_key: true
      t.references :category, null: false, foreign_key: true

      t.timestamps
    end
  end
end



### db/migrate/20240717171849_add_address_and_province_to_users.rb ###
class AddAddressAndProvinceToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :address, :string
    add_reference :users, :province, null: false, foreign_key: true
  end
end



### db/migrate/20240717173001_add_username_to_users.rb ###
class AddUsernameToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :username, :string
  end
end



### db/migrate/20240717201034_create_pages.rb ###
class CreatePages < ActiveRecord::Migration[7.1]
  def change
    create_table :pages do |t|
      t.string :title
      t.text :content

      t.timestamps
    end
  end
end



### db/migrate/20240724000000_add_qst_to_provinces.rb ###
class AddQstToProvinces < ActiveRecord::Migration[6.0]
  def change
    add_column :provinces, :qst, :decimal, precision: 5, scale: 2, default: 0.0
  end
end


### db/migrate/20240724232905_add_on_sale_to_products.rb ###
class AddOnSaleToProducts < ActiveRecord::Migration[7.1]
  def change
    add_column :products, :on_sale, :boolean
  end
end



### db/migrate/20240727013307_add_devise_to_users.rb ###
class AddDeviseToUsers < ActiveRecord::Migration[7.1]
  def change
    change_table :users, bulk: true do |t|
      ## Database authenticatable
      t.string :email, null: false, default: "" unless column_exists?(:users, :email)
      t.string :encrypted_password, null: false, default: "" unless column_exists?(:users, :encrypted_password)

      ## Recoverable
      t.string :reset_password_token unless column_exists?(:users, :reset_password_token)
      t.datetime :reset_password_sent_at unless column_exists?(:users, :reset_password_sent_at)

      ## Rememberable
      t.datetime :remember_created_at unless column_exists?(:users, :remember_created_at)

      ## Trackable
      t.integer :sign_in_count, default: 0, null: false unless column_exists?(:users, :sign_in_count)
      t.datetime :current_sign_in_at unless column_exists?(:users, :current_sign_in_at)
      t.datetime :last_sign_in_at unless column_exists?(:users, :last_sign_in_at)
      t.string :current_sign_in_ip unless column_exists?(:users, :current_sign_in_ip)
      t.string :last_sign_in_ip unless column_exists?(:users, :last_sign_in_ip)

      ## Confirmable
      # t.string   :confirmation_token unless column_exists?(:users, :confirmation_token)
      # t.datetime :confirmed_at unless column_exists?(:users, :confirmed_at)
      # t.datetime :confirmation_sent_at unless column_exists?(:users, :confirmation_sent_at)
      # t.string   :unconfirmed_email unless column_exists?(:users, :unconfirmed_email) # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false unless column_exists?(:users, :failed_attempts) # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token unless column_exists?(:users, :unlock_token) # Only if unlock strategy is :email or :both
      # t.datetime :locked_at unless column_exists?(:users, :locked_at)

      # Uncomment below if timestamps were not included in your original model.
      # t.timestamps null: false
    end

    add_index :users, :email, unique: true unless index_exists?(:users, :email)
    add_index :users, :reset_password_token, unique: true unless index_exists?(:users, :reset_password_token)
    # add_index :users, :confirmation_token,   unique: true unless index_exists?(:users, :confirmation_token)
    # add_index :users, :unlock_token,         unique: true unless index_exists?(:users, :unlock_token)
  end
end



### db/migrate/20240727063942_create_active_storage_tables.active_storage.rb ###
# This migration comes from active_storage (originally 20170806125915)
class CreateActiveStorageTables < ActiveRecord::Migration[7.0]
  def change
    # Use Active Record's configured type for primary and foreign keys
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :active_storage_blobs, id: primary_key_type do |t|
      t.string   :key,          null: false
      t.string   :filename,     null: false
      t.string   :content_type
      t.text     :metadata
      t.string   :service_name, null: false
      t.bigint   :byte_size,    null: false
      t.string   :checksum

      if connection.supports_datetime_with_precision?
        t.datetime :created_at, precision: 6, null: false
      else
        t.datetime :created_at, null: false
      end

      t.index [ :key ], unique: true
    end

    create_table :active_storage_attachments, id: primary_key_type do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false, type: foreign_key_type
      t.references :blob,     null: false, type: foreign_key_type

      if connection.supports_datetime_with_precision?
        t.datetime :created_at, precision: 6, null: false
      else
        t.datetime :created_at, null: false
      end

      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end

    create_table :active_storage_variant_records, id: primary_key_type do |t|
      t.belongs_to :blob, null: false, index: false, type: foreign_key_type
      t.string :variation_digest, null: false

      t.index [ :blob_id, :variation_digest ], name: :index_active_storage_variant_records_uniqueness, unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private
    def primary_and_foreign_key_types
      config = Rails.configuration.generators
      setting = config.options[config.orm][:primary_key_type]
      primary_key_type = setting || :primary_key
      foreign_key_type = setting || :bigint
      [primary_key_type, foreign_key_type]
    end
end



### db/migrate/20240727210617_add_province_id_to_orders.rb ###
class AddProvinceIdToOrders < ActiveRecord::Migration[7.0]
  def change
    add_column :orders, :province_id, :integer
    add_index :orders, :province_id
  end
end



### db/migrate/20240728003827_add_default_status_to_orders.rb ###
class AddDefaultStatusToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :status, :integer, default: 0
  end
end



### db/migrate/20240803050505_change_status_type_in_orders.rb ###
class ChangeStatusTypeInOrders < ActiveRecord::Migration[6.1]
  def up
    # Change the column type to integer
    change_column :orders, :status, :integer, default: 0, null: false

    # Manually set existing records to a known state if they have nil status
    Order.where(status: nil).update_all(status: 0) # Set to :new_order as default
  end

  def change
    change_column :orders, :status, :integer, default: 0, null: false
  end

  def down
    # Revert the changes if necessary
    change_column :orders, :status, :string
  end
end



### db/migrate/20240803052544_add_payment_id_to_orders.rb ###
class AddPaymentIdToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :payment_id, :string
  end
end



### db/migrate/20240803053741_add_payment_intent_id_to_orders.rb ###
class AddPaymentIntentIdToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :payment_intent_id, :string
  end
end



### db/migrate/20240804013204_add_metadata_to_orders.rb ###
class AddMetadataToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :metadata, :text
  end
end



### db/migrate/20240804051524_add_tax_rates_to_orders.rb ###
class AddTaxRatesToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :gst_rate, :decimal, precision: 5, scale: 2
    add_column :orders, :pst_rate, :decimal, precision: 5, scale: 2
    add_column :orders, :qst_rate, :decimal, precision: 5, scale: 2
  end
end



### db/migrate/20240804210625_add_hst_rate_to_orders.rb ###
class AddHstRateToOrders < ActiveRecord::Migration[7.1]
  def change
    add_column :orders, :hst_rate, :decimal, precision: 5, scale: 2, default: 0.0
  end
end



### db/migrate/20240804210999_add_default_hst_rate_to_orders.rb ###
class AddDefaultHstRateToOrders < ActiveRecord::Migration[7.1]
  def up
    # Set a default value for existing orders
    Order.where(hst_rate: nil).update_all(hst_rate: 0.0)

    # Ensure the column has a default value in the future
    change_column_default :orders, :hst_rate, 0.0
  end

  def down
    change_column_default :orders, :hst_rate, nil
  end
end



### db/seeds.rb ###
require 'faker'
require 'open-uri'
require 'nokogiri'
require 'json'
require 'net/http'

ActiveRecord::Base.transaction do
  # Provinces
  provinces = [
    { name: 'Alberta', gst: 0.05, pst: 0.0, qst: 0.0, hst: 0.0 },
    { name: 'British Columbia', gst: 0.05, pst: 0.07, qst: 0.0, hst: 0.0 },
    { name: 'Manitoba', gst: 0.05, pst: 0.07, qst: 0.0, hst: 0.0 },
    { name: 'New Brunswick', gst: 0.0, pst: 0.0, qst: 0.0, hst: 0.15 },
    { name: 'Newfoundland and Labrador', gst: 0.0, pst: 0.0, qst: 0.0, hst: 0.15 },
    { name: 'Northwest Territories', gst: 0.05, pst: 0.0, qst: 0.0, hst: 0.0 },
    { name: 'Nova Scotia', gst: 0.0, pst: 0.0, qst: 0.0, hst: 0.15 },
    { name: 'Nunavut', gst: 0.05, pst: 0.0, qst: 0.0, hst: 0.0 },
    { name: 'Ontario', gst: 0.0, pst: 0.0, qst: 0.0, hst: 0.13 },
    { name: 'Prince Edward Island', gst: 0.0, pst: 0.0, qst: 0.0, hst: 0.15 },
    { name: 'Quebec', gst: 0.05, pst: 0.0, qst: 0.09975, hst: 0.0 },
    { name: 'Saskatchewan', gst: 0.05, pst: 0.06, qst: 0.0, hst: 0.0 },
    { name: 'Yukon', gst: 0.05, pst: 0.0, qst: 0.0, hst: 0.0 }
  ]

  provinces.each do |province_data|
    Province.find_or_create_by!(name: province_data[:name]) do |province|
      province.gst = province_data[:gst]
      province.pst = province_data[:pst]
      province.qst = province_data[:qst]
      province.hst = province_data[:hst]
    end
  end
  # Admin Users
  AdminUser.find_or_create_by!(email: 'admin@example.com') do |admin|
    admin.password = 'password'
    admin.password_confirmation = 'password'
  end


  # Users
  User.find_or_create_by!(email: 'jao@example.com') do |user|
    user.username = 'jao'
    user.password = 'password'
    user.address = '123 Main St'
    user.province = Province.first
  end

  # Categories
  categories = ['Food', 'Toys', 'Accessories', 'Housing']
  categories.each do |category|
    Category.find_or_create_by!(name: category)
  end

  # Array of image paths
  image_paths = Dir[Rails.root.join('app', 'assets', 'images', 'seeds', '*.jpg')]

  # 1.6: Seeding 100 products across 4 categories using Faker
  100.times do
    product = Product.create!(
      name: Faker::Commerce.product_name,
      description: Faker::Lorem.paragraph,
      price: Faker::Commerce.price,
      stock_quantity: rand(1..100),
      on_sale: false
    )

    # Randomly assign an image to the product
    image_path = image_paths.sample
    if File.exist?(image_path)
      product.image.attach(io: File.open(image_path), filename: File.basename(image_path), content_type: 'image/jpg')
    else
      puts "Image file not found: #{image_path}"
    end

    ProductCategory.create!(product: product, category: Category.order('RANDOM()').first)
  end

  # 1.7: Scraping products and categories from eBay
  def scrape_products
    url = 'https://www.ebay.com/sch/i.html?_nkw=aluminum'
    html = URI.open(url, 'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3')
    doc = Nokogiri::HTML(html)

    doc.css('.s-item').each do |product_node|
      name = product_node.css('.s-item__title').text.strip
      price = product_node.css('.s-item__price').text.strip.gsub(/[^\d.]/, '').to_f
      category_name = "Aluminum Products" # Since the category is implied by the search

      category = Category.find_or_create_by!(name: category_name)
      product = Product.create!(
        name: name,
        description: "No description available.",
        price: price,
        stock_quantity: rand(1..100)
      )

      ProductCategory.create!(product: product, category: category)
    end
  end

  scrape_products

  # 1.8: Fetching products and categories from an API
  def fetch_products_from_api
    url = URI.parse('https://dummyjson.com/products')
    response = Net::HTTP.get_response(url)
    products = JSON.parse(response.body)['products']

    products.each do |product_data|
      category = Category.find_or_create_by!(name: product_data['category'])
      product = Product.create!(
        name: product_data['title'],
        description: product_data['description'],
        price: product_data['price'].to_f,
        stock_quantity: product_data['stock'].to_i
      )

      ProductCategory.create!(product: product, category: category)
    end
  end

  fetch_products_from_api

  # Pages
  Page.find_or_create_by!(title: 'Contact') do |page|
    page.content = '<p>Contact us at contact@example.com.</p>'
  end

  Page.find_or_create_by!(title: 'About') do |page|
    page.content = '<p>This is the About page content.</p>'
  end
end



### Gemfile ###
source "https://rubygems.org"

ruby "3.3.3"

gem "rails", "~> 7.1.3", ">= 7.1.3.4"
gem "sprockets-rails"
gem "sqlite3", "~> 1.4"
gem 'puma', '~> 6.4.2'
gem 'bcrypt', '~> 3.1.7'
gem 'activeadmin'
gem 'devise'
gem 'sassc-rails'
gem 'activeadmin_quill_editor'
gem 'jquery-rails'
gem 'bootstrap', '~> 5.1.0'
gem 'faker'
gem 'kaminari'
gem 'rails-ujs'
gem 'turbolinks', '~> 5'
gem "importmap-rails"
gem "turbo-rails"
gem "stimulus-rails"
gem "jbuilder"
gem "tzinfo-data", platforms: %i[ mswin mswin64 mingw x64_mingw jruby ]
gem "bootsnap", require: false
gem 'activestorage', '~> 7.1.3'
gem 'image_processing', '~> 1.2'
gem 'ruby-vips','2.2.2'
gem 'mini_magick', '~> 4.10'
gem 'stripe'
gem 'dotenv-rails', groups: [:development, :test]

group :development, :test do
  gem "debug", platforms: %i[ mri mswin mswin64 mingw x64_mingw ]
end

group :development do
  gem "web-console"
end

group :test do
  gem "capybara"
  gem "selenium-webdriver"
end



### config/database.yml ###
# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 10000

development:
  <<: *default
  database: db/development.sqlite3
  pool: 5

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: storage/test.sqlite3

production:
  <<: *default
  database: storage/production.sqlite3



